{"version":3,"sources":["webpack:///./src/components/SqlCMEditor/modules/sql.js","webpack:///./node_modules/core-js/modules/es.string.iterator.js","webpack:///./node_modules/core-js/modules/es.string.match.js","webpack:///./node_modules/@babel/runtime/helpers/typeof.js","webpack:///./node_modules/core-js/modules/es.symbol.iterator.js","webpack:///./node_modules/core-js/modules/es.symbol.description.js"],"names":["mod","exports","module","require","define","CodeMirror","defineMode","config","parserConfig","client","atoms","false","true","null","builtin","keywords","operatorChars","support","hooks","dateSQL","date","time","timestamp","backslashStringEscapes","brackets","punctuation","tokenBase","stream","state","ch","next","result","hexNumber","match","binaryNumber","charCodeAt","decimallessFloat","eatSpace","eol","eat","doubleQuote","tokenize","tokenLiteral","nCharCast","charsetCast","peek","commentSlashSlash","skipToEnd","commentHash","commentSpaceRequired","tokenComment","test","eatWhile","word","current","toLowerCase","hasOwnProperty","zerolessFloat","ODBCdotTable","quote","escaped","depth","m","pushContext","type","context","prev","indent","indentation","col","column","popContext","startState","token","sol","align","style","tok","textAfter","cx","Pass","closing","charAt","indentUnit","blockCommentStart","blockCommentEnd","lineComment","closeBrackets","set","str","obj","words","split","i","length","defineMIME","name","InternalStateModule","defineIterator","STRING_ITERATOR","setInternalState","getInternalState","getterFor","String","iterated","this","string","index","point","value","undefined","done","fixRegExpWellKnownSymbolLogic","anObject","toLength","requireObjectCoercible","advanceStringIndex","regExpExec","MATCH","nativeMatch","maybeCallNative","regexp","O","matcher","call","RegExp","res","rx","S","global","fullUnicode","unicode","lastIndex","A","n","matchStr","_typeof","Symbol","iterator","constructor","prototype","defineWellKnownSymbol","$","DESCRIPTORS","has","isObject","defineProperty","f","copyConstructorProperties","NativeSymbol","description","EmptyStringDescriptionStore","SymbolWrapper","arguments","symbolPrototype","symbolToString","toString","native","configurable","get","symbol","valueOf","desc","slice","replace","forced"],"mappings":"2KAGA,SAAUA,GACc,UAAlB,EAAOC,IAAwC,UAAjB,EAAOC,GAEvCF,EAAIG,EAAQ,UAKZC,EAAO,CAAC,WAAF,uEARV,EAYG,SAASC,GACV,aAEAA,EAAWC,WAAW,OAAO,SAASC,EAAQC,GAG5C,IAAIC,EAASD,EAAaC,QAAU,GAClCC,EAAQF,EAAaE,OAAS,CAAEC,OAAO,EAAMC,MAAM,EAAMC,MAAM,GAC/DC,EAAUN,EAAaM,SAAW,GAClCC,EAAWP,EAAaO,UAAY,GACpCC,EAAgBR,EAAaQ,eAAiB,mBAC9CC,EAAUT,EAAaS,SAAW,GAClCC,EAAQV,EAAaU,OAAS,GAC9BC,EAAUX,EAAaW,SAAW,CAChCC,MAAM,EACNC,MAAM,EACNC,WAAW,GAEbC,GAAiE,IAAxCf,EAAae,uBAEtCC,EAAWhB,EAAagB,UAAY,iBACpCC,EAAcjB,EAAaiB,aAAe,UAE5C,SAASC,EAAUC,EAAQC,GACzB,IAAIC,EAAKF,EAAOG,OAGhB,GAAIZ,EAAMW,GAAK,CACb,IAAIE,EAASb,EAAMW,GAAIF,EAAQC,GAC/B,IAAe,IAAXG,EAAkB,OAAOA,EAG/B,GAAId,EAAQe,YAAqB,KAANH,GAAaF,EAAOM,MAAM,uBAAiC,KAANJ,GAAmB,KAANA,IAAcF,EAAOM,MAAM,oBAGtH,MAAO,SACF,GAAIhB,EAAQiB,gBAAyB,KAANL,GAAmB,KAANA,IAAcF,EAAOM,MAAM,aAAuB,KAANJ,GAAaF,EAAOM,MAAM,YAGvH,MAAO,SACF,GAAIJ,EAAGM,WAAW,GAAK,IAAMN,EAAGM,WAAW,GAAK,GAKrD,OAFAR,EAAOM,MAAM,wCACbhB,EAAQmB,kBAAoBT,EAAOM,MAAM,aAClC,SACF,GAAU,KAANJ,IAAcF,EAAOU,YAAcV,EAAOW,OAASX,EAAOY,IAAI,MAEvE,MAAO,aACF,GAAU,KAANV,GAAoB,KAANA,GAAaZ,EAAQuB,YAI5C,OADAZ,EAAMa,SAAWC,EAAab,GACvBD,EAAMa,SAASd,EAAQC,GACzB,IAAMX,EAAQ0B,YAAoB,KAANd,GAAmB,KAANA,IAAgBZ,EAAQ2B,aAAqB,KAANf,GAAaF,EAAOM,MAAM,sBAA0C,KAAjBN,EAAOkB,QAAkC,KAAjBlB,EAAOkB,QAGvK,MAAO,UACF,GAAI5B,EAAQ6B,mBAA2B,KAANjB,GAAaF,EAAOY,IAAI,KAG9D,OADAZ,EAAOoB,YACA,UACF,GAAK9B,EAAQ+B,aAAqB,KAANnB,GAAqB,KAANA,GAAaF,EAAOY,IAAI,QAAUtB,EAAQgC,sBAAwBtB,EAAOY,IAAI,MAI7H,OADAZ,EAAOoB,YACA,UACF,GAAU,KAANlB,GAAaF,EAAOY,IAAI,KAIjC,OADAX,EAAMa,SAAWS,EAAa,GACvBtB,EAAMa,SAASd,EAAQC,GACzB,GAAU,KAANC,EAOJ,IAAIb,EAAcmC,KAAKtB,GAG5B,OADAF,EAAOyB,SAASpC,GACT,WACF,GAAIQ,EAAS2B,KAAKtB,GAGvB,OADAF,EAAOyB,SAAS5B,GACT,UACF,GAAIC,EAAY0B,KAAKtB,GAG1B,OADAF,EAAOyB,SAAS3B,GACT,cACF,GAAU,KAANI,IAAcF,EAAOM,MAAM,yCAA2CN,EAAOM,MAAM,yCAG5F,MAAO,SAEPN,EAAOyB,SAAS,YAChB,IAAIC,EAAO1B,EAAO2B,UAAUC,cAG5B,OAEEpC,EAAQqC,eAAeH,KACtB1B,EAAOM,MAAM,iBAAmBN,EAAOM,MAAM,iBAEvC,SAELvB,EAAM8C,eAAeH,GAAc,OAEnCvC,EAAQ0C,eAAeH,GAAc,UAErCtC,EAASyC,eAAeH,GAAc,UAEtC5C,EAAO+C,eAAeH,GAAc,WACjC,KAxCP,OAAIpC,EAAQwC,eAAiB9B,EAAOM,MAAM,2BAAmC,SACzEN,EAAOM,MAAM,QAAgB,KAG7BhB,EAAQyC,cAAgB/B,EAAOM,MAAM,aAAqB,kBAA9D,EAyCJ,SAASS,EAAaiB,GACpB,OAAO,SAAShC,EAAQC,GACtB,IACEC,EADE+B,GAAU,EAEd,MAA+B,OAAvB/B,EAAKF,EAAOG,QAAiB,CACnC,GAAID,GAAM8B,IAAUC,EAAS,CAC3BhC,EAAMa,SAAWf,EACjB,MAEFkC,EAAUrC,IAA2BqC,GAAiB,MAAN/B,EAElD,MAAO,UAIX,SAASqB,EAAaW,GACpB,OAAO,SAASlC,EAAQC,GACtB,IAAIkC,EAAInC,EAAOM,MAAM,mBAKrB,OAJK6B,EACY,MAARA,EAAE,GAAYlC,EAAMa,SAAWS,EAAaW,EAAQ,GACzCjC,EAAMa,SAAjBoB,EAAQ,EAAoBX,EAAaW,EAAQ,GACpCnC,EAHdC,EAAOoB,YAIR,WAIX,SAASgB,EAAYpC,EAAQC,EAAOoC,GAClCpC,EAAMqC,QAAU,CACdC,KAAMtC,EAAMqC,QACZE,OAAQxC,EAAOyC,cACfC,IAAK1C,EAAO2C,SACZN,KAAMA,GAIV,SAASO,EAAW3C,GAClBA,EAAMuC,OAASvC,EAAMqC,QAAQE,OAC7BvC,EAAMqC,QAAUrC,EAAMqC,QAAQC,KAGhC,MAAO,CACLM,WAAY,WACV,MAAO,CAAE/B,SAAUf,EAAWuC,QAAS,OAGzCQ,MAAO,SAAS9C,EAAQC,GAItB,GAHID,EAAO+C,OACL9C,EAAMqC,SAAkC,MAAvBrC,EAAMqC,QAAQU,QAAe/C,EAAMqC,QAAQU,OAAQ,GAEtE/C,EAAMa,UAAYf,GAAaC,EAAOU,WAAY,OAAO,KAE7D,IAAIuC,EAAQhD,EAAMa,SAASd,EAAQC,GACnC,GAAa,WAATgD,EAAoB,OAAOA,EAE3BhD,EAAMqC,SAAkC,MAAvBrC,EAAMqC,QAAQU,QAAe/C,EAAMqC,QAAQU,OAAQ,GAExE,IAAIE,EAAMlD,EAAO2B,UAIjB,MAHW,KAAPuB,EAAYd,EAAYpC,EAAQC,EAAO,KAC3B,KAAPiD,EAAYd,EAAYpC,EAAQC,EAAO,KACvCA,EAAMqC,SAAWrC,EAAMqC,QAAQD,MAAQa,GAAKN,EAAW3C,GACzDgD,GAGTT,OAAQ,SAASvC,EAAOkD,GACtB,IAAIC,EAAKnD,EAAMqC,QACf,IAAKc,EAAI,OAAO1E,EAAW2E,KAC3B,IAAIC,EAAUH,EAAUI,OAAO,IAAMH,EAAGf,KACxC,OAAIe,EAAGJ,MAAcI,EAAGV,KAAOY,EAAU,EAAI,GACjCF,EAAGZ,QAAUc,EAAU,EAAI1E,EAAO4E,aAGhDC,kBAAmB,KACnBC,gBAAiB,KACjBC,YAAarE,EAAQ6B,kBAAoB,KAAO7B,EAAQ+B,YAAc,IAAM,KAC5EuC,cAAe,qBAInB,WA8EE,SAASC,EAAIC,GAGX,IAFA,IAAIC,EAAM,GACRC,EAAQF,EAAIG,MAAM,KACXC,EAAI,EAAGA,EAAIF,EAAMG,SAAUD,EAAGH,EAAIC,EAAME,KAAM,EACvD,OAAOH,EAITrF,EAAW0F,WAAW,kBAAmB,CACvCC,KAAM,MACNjF,SAAUyE,EACR,u9CAEF1E,QAAS0E,EAAI,qLACb9E,MAAO8E,EAAI,mBACXxE,cAAe,mBACfG,QAASqE,EAAI,uBACbvE,QAASuE,EAAI,4CA/FjB,Q,6DCnNF,IAAIN,EAAS,EAAQ,QAAiCA,OAClDe,EAAsB,EAAQ,QAC9BC,EAAiB,EAAQ,QAEzBC,EAAkB,kBAClBC,EAAmBH,EAAoBT,IACvCa,EAAmBJ,EAAoBK,UAAUH,GAIrDD,EAAeK,OAAQ,UAAU,SAAUC,GACzCJ,EAAiBK,KAAM,CACrBzC,KAAMmC,EACNO,OAAQH,OAAOC,GACfG,MAAO,OAIR,WACD,IAGIC,EAHAhF,EAAQyE,EAAiBI,MACzBC,EAAS9E,EAAM8E,OACfC,EAAQ/E,EAAM+E,MAElB,OAAIA,GAASD,EAAOZ,OAAe,CAAEe,WAAOC,EAAWC,MAAM,IAC7DH,EAAQ1B,EAAOwB,EAAQC,GACvB/E,EAAM+E,OAASC,EAAMd,OACd,CAAEe,MAAOD,EAAOG,MAAM,Q,oCC1B/B,IAAIC,EAAgC,EAAQ,QACxCC,EAAW,EAAQ,QACnBC,EAAW,EAAQ,QACnBC,EAAyB,EAAQ,QACjCC,EAAqB,EAAQ,QAC7BC,EAAa,EAAQ,QAGzBL,EAA8B,QAAS,GAAG,SAAUM,EAAOC,EAAaC,GACtE,MAAO,CAGL,SAAeC,GACb,IAAIC,EAAIP,EAAuBV,MAC3BkB,OAAoBb,GAAVW,OAAsBX,EAAYW,EAAOH,GACvD,YAAmBR,IAAZa,EAAwBA,EAAQC,KAAKH,EAAQC,GAAK,IAAIG,OAAOJ,GAAQH,GAAOf,OAAOmB,KAI5F,SAAUD,GACR,IAAIK,EAAMN,EAAgBD,EAAaE,EAAQhB,MAC/C,GAAIqB,EAAIf,KAAM,OAAOe,EAAIjB,MAEzB,IAAIkB,EAAKd,EAASQ,GACdO,EAAIzB,OAAOE,MAEf,IAAKsB,EAAGE,OAAQ,OAAOZ,EAAWU,EAAIC,GAEtC,IAAIE,EAAcH,EAAGI,QACrBJ,EAAGK,UAAY,EACf,IAEIrG,EAFAsG,EAAI,GACJC,EAAI,EAER,MAAwC,QAAhCvG,EAASsF,EAAWU,EAAIC,IAAc,CAC5C,IAAIO,EAAWhC,OAAOxE,EAAO,IAC7BsG,EAAEC,GAAKC,EACU,KAAbA,IAAiBR,EAAGK,UAAYhB,EAAmBY,EAAGd,EAASa,EAAGK,WAAYF,IAClFI,IAEF,OAAa,IAANA,EAAU,KAAOD,Q,qBCxC9B,SAASG,EAAQ9C,GAaf,MAVsB,oBAAX+C,QAAoD,kBAApBA,OAAOC,SAChDxI,EAAOD,QAAUuI,EAAU,SAAiB9C,GAC1C,cAAcA,GAGhBxF,EAAOD,QAAUuI,EAAU,SAAiB9C,GAC1C,OAAOA,GAAyB,oBAAX+C,QAAyB/C,EAAIiD,cAAgBF,QAAU/C,IAAQ+C,OAAOG,UAAY,gBAAkBlD,GAItH8C,EAAQ9C,G,4DAGjBxF,EAAOD,QAAUuI,G,qBChBjB,IAAIK,EAAwB,EAAQ,QAIpCA,EAAsB,a,kCCDtB,IAAIC,EAAI,EAAQ,QACZC,EAAc,EAAQ,QACtBd,EAAS,EAAQ,QACjBe,EAAM,EAAQ,QACdC,EAAW,EAAQ,QACnBC,EAAiB,EAAQ,QAAuCC,EAChEC,EAA4B,EAAQ,QAEpCC,EAAepB,EAAOQ,OAE1B,GAAIM,GAAsC,mBAAhBM,MAAiC,gBAAiBA,EAAaT,iBAExD9B,IAA/BuC,IAAeC,aACd,CACD,IAAIC,EAA8B,GAE9BC,EAAgB,WAClB,IAAIF,EAAcG,UAAU3D,OAAS,QAAsBgB,IAAjB2C,UAAU,QAAmB3C,EAAYP,OAAOkD,UAAU,IAChG1H,EAAS0E,gBAAgB+C,EACzB,IAAIH,EAAaC,QAEDxC,IAAhBwC,EAA4BD,IAAiBA,EAAaC,GAE9D,MADoB,KAAhBA,IAAoBC,EAA4BxH,IAAU,GACvDA,GAETqH,EAA0BI,EAAeH,GACzC,IAAIK,EAAkBF,EAAcZ,UAAYS,EAAaT,UAC7Dc,EAAgBf,YAAca,EAE9B,IAAIG,EAAiBD,EAAgBE,SACjCC,EAAyC,gBAAhCtD,OAAO8C,EAAa,SAC7B5B,EAAS,wBACbyB,EAAeQ,EAAiB,cAAe,CAC7CI,cAAc,EACdC,IAAK,WACH,IAAIC,EAASf,EAASxC,MAAQA,KAAKwD,UAAYxD,KAC3CC,EAASiD,EAAe/B,KAAKoC,GACjC,GAAIhB,EAAIO,EAA6BS,GAAS,MAAO,GACrD,IAAIE,EAAOL,EAASnD,EAAOyD,MAAM,GAAI,GAAKzD,EAAO0D,QAAQ3C,EAAQ,MACjE,MAAgB,KAATyC,OAAcpD,EAAYoD,KAIrCpB,EAAE,CAAEb,QAAQ,EAAMoC,QAAQ,GAAQ,CAChC5B,OAAQe","file":"js/chunk-66c64866.ea9c6270.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\")\n    // CommonJS\n    mod(require(\"codemirror\"));\n  // eslint-disable-next-line no-undef\n  else if (typeof define == \"function\" && define.amd)\n    // AMD\n    // eslint-disable-next-line no-undef\n    define([\"codemirror\"], mod);\n  // Plain browser env\n  // eslint-disable-next-line no-undef\n  else mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"sql\", function(config, parserConfig) {\n    \"use strict\";\n\n    var client = parserConfig.client || {},\n      atoms = parserConfig.atoms || { false: true, true: true, null: true },\n      builtin = parserConfig.builtin || {},\n      keywords = parserConfig.keywords || {},\n      operatorChars = parserConfig.operatorChars || /^[*+\\-%<>!=&|~^]/,\n      support = parserConfig.support || {},\n      hooks = parserConfig.hooks || {},\n      dateSQL = parserConfig.dateSQL || {\n        date: true,\n        time: true,\n        timestamp: true\n      },\n      backslashStringEscapes = parserConfig.backslashStringEscapes !== false,\n      // eslint-disable-next-line no-useless-escape\n      brackets = parserConfig.brackets || /^[\\{}\\(\\)\\[\\]]/,\n      punctuation = parserConfig.punctuation || /^[;.,:]/;\n\n    function tokenBase(stream, state) {\n      var ch = stream.next();\n\n      // call hooks from the mime type\n      if (hooks[ch]) {\n        var result = hooks[ch](stream, state);\n        if (result !== false) return result;\n      }\n\n      if (support.hexNumber && ((ch == \"0\" && stream.match(/^[xX][0-9a-fA-F]+/)) || ((ch == \"x\" || ch == \"X\") && stream.match(/^'[0-9a-fA-F]+'/)))) {\n        // hex\n        // ref: http://dev.mysql.com/doc/refman/5.5/en/hexadecimal-literals.html\n        return \"number\";\n      } else if (support.binaryNumber && (((ch == \"b\" || ch == \"B\") && stream.match(/^'[01]+'/)) || (ch == \"0\" && stream.match(/^b[01]+/)))) {\n        // bitstring\n        // ref: http://dev.mysql.com/doc/refman/5.5/en/bit-field-literals.html\n        return \"number\";\n      } else if (ch.charCodeAt(0) > 47 && ch.charCodeAt(0) < 58) {\n        // numbers\n        // ref: http://dev.mysql.com/doc/refman/5.5/en/number-literals.html\n        stream.match(/^[0-9]*(\\.[0-9]+)?([eE][-+]?[0-9]+)?/);\n        support.decimallessFloat && stream.match(/^\\.(?!\\.)/);\n        return \"number\";\n      } else if (ch == \"?\" && (stream.eatSpace() || stream.eol() || stream.eat(\";\"))) {\n        // placeholders\n        return \"variable-3\";\n      } else if (ch == \"'\" || (ch == '\"' && support.doubleQuote)) {\n        // strings\n        // ref: http://dev.mysql.com/doc/refman/5.5/en/string-literals.html\n        state.tokenize = tokenLiteral(ch);\n        return state.tokenize(stream, state);\n      } else if (((support.nCharCast && (ch == \"n\" || ch == \"N\")) || (support.charsetCast && ch == \"_\" && stream.match(/[a-z][a-z0-9]*/i))) && (stream.peek() == \"'\" || stream.peek() == '\"')) {\n        // charset casting: _utf8'str', N'str', n'str'\n        // ref: http://dev.mysql.com/doc/refman/5.5/en/string-literals.html\n        return \"keyword\";\n      } else if (support.commentSlashSlash && ch == \"/\" && stream.eat(\"/\")) {\n        // 1-line comment\n        stream.skipToEnd();\n        return \"comment\";\n      } else if ((support.commentHash && ch == \"#\") || (ch == \"-\" && stream.eat(\"-\") && (!support.commentSpaceRequired || stream.eat(\" \")))) {\n        // 1-line comments\n        // ref: https://kb.askmonty.org/en/comment-syntax/\n        stream.skipToEnd();\n        return \"comment\";\n      } else if (ch == \"/\" && stream.eat(\"*\")) {\n        // multi-line comments\n        // ref: https://kb.askmonty.org/en/comment-syntax/\n        state.tokenize = tokenComment(1);\n        return state.tokenize(stream, state);\n      } else if (ch == \".\") {\n        // .1 for 0.1\n        if (support.zerolessFloat && stream.match(/^(?:\\d+(?:e[+-]?\\d+)?)/i)) return \"number\";\n        if (stream.match(/^\\.+/)) return null;\n        // .table_name (ODBC)\n        // // ref: http://dev.mysql.com/doc/refman/5.6/en/identifier-qualifiers.html\n        if (support.ODBCdotTable && stream.match(/^[\\w\\d_]+/)) return \"variable-2\";\n      } else if (operatorChars.test(ch)) {\n        // operators\n        stream.eatWhile(operatorChars);\n        return \"operator\";\n      } else if (brackets.test(ch)) {\n        // brackets\n        stream.eatWhile(brackets);\n        return \"bracket\";\n      } else if (punctuation.test(ch)) {\n        // punctuation\n        stream.eatWhile(punctuation);\n        return \"punctuation\";\n      } else if (ch == \"{\" && (stream.match(/^( )*(d|D|t|T|ts|TS)( )*'[^']*'( )*}/) || stream.match(/^( )*(d|D|t|T|ts|TS)( )*\"[^\"]*\"( )*}/))) {\n        // dates (weird ODBC syntax)\n        // ref: http://dev.mysql.com/doc/refman/5.5/en/date-and-time-literals.html\n        return \"number\";\n      } else {\n        stream.eatWhile(/^[_\\w\\d]/);\n        var word = stream.current().toLowerCase();\n        // dates (standard SQL syntax)\n        // ref: http://dev.mysql.com/doc/refman/5.5/en/date-and-time-literals.html\n        if (\n          // eslint-disable-next-line no-prototype-builtins\n          dateSQL.hasOwnProperty(word) &&\n          (stream.match(/^( )+'[^']*'/) || stream.match(/^( )+\"[^\"]*\"/))\n        )\n          return \"number\";\n        // eslint-disable-next-line no-prototype-builtins\n        if (atoms.hasOwnProperty(word)) return \"atom\";\n        // eslint-disable-next-line no-prototype-builtins\n        if (builtin.hasOwnProperty(word)) return \"builtin\";\n        // eslint-disable-next-line no-prototype-builtins\n        if (keywords.hasOwnProperty(word)) return \"keyword\";\n        // eslint-disable-next-line no-prototype-builtins\n        if (client.hasOwnProperty(word)) return \"string-2\";\n        return null;\n      }\n    }\n\n    // 'string', with char specified in quote escaped by '\\'\n    function tokenLiteral(quote) {\n      return function(stream, state) {\n        var escaped = false,\n          ch;\n        while ((ch = stream.next()) != null) {\n          if (ch == quote && !escaped) {\n            state.tokenize = tokenBase;\n            break;\n          }\n          escaped = backslashStringEscapes && !escaped && ch == \"\\\\\";\n        }\n        return \"string\";\n      };\n    }\n\n    function tokenComment(depth) {\n      return function(stream, state) {\n        var m = stream.match(/^.*?(\\/\\*|\\*\\/)/);\n        if (!m) stream.skipToEnd();\n        else if (m[1] == \"/*\") state.tokenize = tokenComment(depth + 1);\n        else if (depth > 1) state.tokenize = tokenComment(depth - 1);\n        else state.tokenize = tokenBase;\n        return \"comment\";\n      };\n    }\n\n    function pushContext(stream, state, type) {\n      state.context = {\n        prev: state.context,\n        indent: stream.indentation(),\n        col: stream.column(),\n        type: type\n      };\n    }\n\n    function popContext(state) {\n      state.indent = state.context.indent;\n      state.context = state.context.prev;\n    }\n\n    return {\n      startState: function() {\n        return { tokenize: tokenBase, context: null };\n      },\n\n      token: function(stream, state) {\n        if (stream.sol()) {\n          if (state.context && state.context.align == null) state.context.align = false;\n        }\n        if (state.tokenize == tokenBase && stream.eatSpace()) return null;\n\n        var style = state.tokenize(stream, state);\n        if (style == \"comment\") return style;\n\n        if (state.context && state.context.align == null) state.context.align = true;\n\n        var tok = stream.current();\n        if (tok == \"(\") pushContext(stream, state, \")\");\n        else if (tok == \"[\") pushContext(stream, state, \"]\");\n        else if (state.context && state.context.type == tok) popContext(state);\n        return style;\n      },\n\n      indent: function(state, textAfter) {\n        var cx = state.context;\n        if (!cx) return CodeMirror.Pass;\n        var closing = textAfter.charAt(0) == cx.type;\n        if (cx.align) return cx.col + (closing ? 0 : 1);\n        else return cx.indent + (closing ? 0 : config.indentUnit);\n      },\n\n      blockCommentStart: \"/*\",\n      blockCommentEnd: \"*/\",\n      lineComment: support.commentSlashSlash ? \"//\" : support.commentHash ? \"#\" : \"--\",\n      closeBrackets: \"()[]{}''\\\"\\\"``\"\n    };\n  });\n\n  (function() {\n    \"use strict\";\n\n    // `identifier`\n    // eslint-disable-next-line no-unused-vars\n    function hookIdentifier(stream) {\n      // MySQL/MariaDB identifiers\n      // ref: http://dev.mysql.com/doc/refman/5.6/en/identifier-qualifiers.html\n      var ch;\n      while ((ch = stream.next()) != null) {\n        if (ch == \"`\" && !stream.eat(\"`\")) return \"variable-2\";\n      }\n      stream.backUp(stream.current().length - 1);\n      return stream.eatWhile(/\\w/) ? \"variable-2\" : null;\n    }\n\n    // \"identifier\"\n    // eslint-disable-next-line no-unused-vars\n    function hookIdentifierDoublequote(stream) {\n      // Standard SQL /SQLite identifiers\n      // ref: http://web.archive.org/web/20160813185132/http://savage.net.au/SQL/sql-99.bnf.html#delimited%20identifier\n      // ref: http://sqlite.org/lang_keywords.html\n      var ch;\n      while ((ch = stream.next()) != null) {\n        if (ch == '\"' && !stream.eat('\"')) return \"variable-2\";\n      }\n      stream.backUp(stream.current().length - 1);\n      return stream.eatWhile(/\\w/) ? \"variable-2\" : null;\n    }\n\n    // variable token\n    // eslint-disable-next-line no-unused-vars\n    function hookVar(stream) {\n      // variables\n      // @@prefix.varName @varName\n      // varName can be quoted with ` or ' or \"\n      // ref: http://dev.mysql.com/doc/refman/5.5/en/user-variables.html\n      if (stream.eat(\"@\")) {\n        stream.match(/^session\\./);\n        stream.match(/^local\\./);\n        stream.match(/^global\\./);\n      }\n\n      if (stream.eat(\"'\")) {\n        stream.match(/^.*'/);\n        return \"variable-2\";\n      } else if (stream.eat('\"')) {\n        stream.match(/^.*\"/);\n        return \"variable-2\";\n      } else if (stream.eat(\"`\")) {\n        stream.match(/^.*`/);\n        return \"variable-2\";\n        // eslint-disable-next-line no-useless-escape\n      } else if (stream.match(/^[0-9a-zA-Z$\\.\\_]+/)) {\n        return \"variable-2\";\n      }\n      return null;\n    }\n\n    // short client keyword token\n    // eslint-disable-next-line no-unused-vars\n    function hookClient(stream) {\n      // \\N means NULL\n      // ref: http://dev.mysql.com/doc/refman/5.5/en/null-values.html\n      if (stream.eat(\"N\")) {\n        return \"atom\";\n      }\n      // \\g, etc\n      // ref: http://dev.mysql.com/doc/refman/5.5/en/mysql-commands.html\n      return stream.match(/^[a-zA-Z.#!?]/) ? \"variable-2\" : null;\n    }\n\n    // these keywords are used by all SQL dialects (however, a mode can still overwrite it)\n    // eslint-disable-next-line no-unused-vars\n    var sqlKeywords =\n      \"alter and as asc between by count create delete desc distinct drop from group having in insert into is join like not on or order select set table union update values where limit \";\n\n    // turn a space-separated list into an array\n    function set(str) {\n      var obj = {},\n        words = str.split(\" \");\n      for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n      return obj;\n    }\n\n    // Spark SQL\n    CodeMirror.defineMIME(\"text/stream-sql\", {\n      name: \"sql\",\n      keywords: set(\n        \"add after all alter analyze and anti archive array as asc at between bucket buckets by cache cascade case cast change clear cluster clustered codegen collection column columns comment commit compact compactions compute concatenate cost create cross cube current current_date current_timestamp database databases datata dbproperties defined delete delimited desc describe dfs directories distinct distribute drop else end escaped except exchange exists explain export extended external false fields fileformat first following for format formatted from full function functions global grant group grouping having if ignore import in index indexes inner inpath inputformat insert intersect interval into is items join keys last lateral lazy left like limit lines list load local location lock locks logical macro map minus msck natural no not null nulls of on option options or order out outer outputformat over overwrite partition partitioned partitions percent preceding principals purge range recordreader recordwriter recover reduce refresh regexp rename repair replace reset restrict revoke right rlike role roles rollback rollup row rows schema schemas select semi separated serde serdeproperties set sets show skewed sort sorted start statistics stored stratify struct table tables tablesample tblproperties temp temporary terminated then to touch transaction transactions transform true truncate unarchive unbounded uncache union unlock unset use using values view when where window with\"\n      ),\n      builtin: set(\"tinyint smallint int bigint boolean float double string binary timestamp decimal array map struct uniontype delimited serde sequencefile textfile rcfile inputformat outputformat\"),\n      atoms: set(\"false true null\"),\n      operatorChars: /^[*+\\-%<>!=~&|^]/,\n      dateSQL: set(\"date time timestamp\"),\n      support: set(\"ODBCdotTable doubleQuote zerolessFloat\")\n    });\n  })();\n});\n\n/*\n  How Properties of Mime Types are used by SQL Mode\n  =================================================\n\n  keywords:\n    A list of keywords you want to be highlighted.\n  builtin:\n    A list of builtin types you want to be highlighted (if you want types to be of class \"builtin\" instead of \"keyword\").\n  operatorChars:\n    All characters that must be handled as operators.\n  client:\n    Commands parsed and executed by the client (not the server).\n  support:\n    A list of supported syntaxes which are not common, but are supported by more than 1 DBMS.\n    * ODBCdotTable: .tableName\n    * zerolessFloat: .1\n    * doubleQuote\n    * nCharCast: N'string'\n    * charsetCast: _utf8'string'\n    * commentHash: use # char for comments\n    * commentSlashSlash: use // for comments\n    * commentSpaceRequired: require a space after -- for comments\n  atoms:\n    Keywords that must be highlighted as atoms,. Some DBMS's support more atoms than others:\n    UNKNOWN, INFINITY, UNDERFLOW, NaN...\n  dateSQL:\n    Used for date/time SQL standard syntax, because not all DBMS's support same temporal types.\n*/\n","'use strict';\nvar charAt = require('../internals/string-multibyte').charAt;\nvar InternalStateModule = require('../internals/internal-state');\nvar defineIterator = require('../internals/define-iterator');\n\nvar STRING_ITERATOR = 'String Iterator';\nvar setInternalState = InternalStateModule.set;\nvar getInternalState = InternalStateModule.getterFor(STRING_ITERATOR);\n\n// `String.prototype[@@iterator]` method\n// https://tc39.github.io/ecma262/#sec-string.prototype-@@iterator\ndefineIterator(String, 'String', function (iterated) {\n  setInternalState(this, {\n    type: STRING_ITERATOR,\n    string: String(iterated),\n    index: 0\n  });\n// `%StringIteratorPrototype%.next` method\n// https://tc39.github.io/ecma262/#sec-%stringiteratorprototype%.next\n}, function next() {\n  var state = getInternalState(this);\n  var string = state.string;\n  var index = state.index;\n  var point;\n  if (index >= string.length) return { value: undefined, done: true };\n  point = charAt(string, index);\n  state.index += point.length;\n  return { value: point, done: false };\n});\n","'use strict';\nvar fixRegExpWellKnownSymbolLogic = require('../internals/fix-regexp-well-known-symbol-logic');\nvar anObject = require('../internals/an-object');\nvar toLength = require('../internals/to-length');\nvar requireObjectCoercible = require('../internals/require-object-coercible');\nvar advanceStringIndex = require('../internals/advance-string-index');\nvar regExpExec = require('../internals/regexp-exec-abstract');\n\n// @@match logic\nfixRegExpWellKnownSymbolLogic('match', 1, function (MATCH, nativeMatch, maybeCallNative) {\n  return [\n    // `String.prototype.match` method\n    // https://tc39.github.io/ecma262/#sec-string.prototype.match\n    function match(regexp) {\n      var O = requireObjectCoercible(this);\n      var matcher = regexp == undefined ? undefined : regexp[MATCH];\n      return matcher !== undefined ? matcher.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));\n    },\n    // `RegExp.prototype[@@match]` method\n    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@match\n    function (regexp) {\n      var res = maybeCallNative(nativeMatch, regexp, this);\n      if (res.done) return res.value;\n\n      var rx = anObject(regexp);\n      var S = String(this);\n\n      if (!rx.global) return regExpExec(rx, S);\n\n      var fullUnicode = rx.unicode;\n      rx.lastIndex = 0;\n      var A = [];\n      var n = 0;\n      var result;\n      while ((result = regExpExec(rx, S)) !== null) {\n        var matchStr = String(result[0]);\n        A[n] = matchStr;\n        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);\n        n++;\n      }\n      return n === 0 ? null : A;\n    }\n  ];\n});\n","function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    module.exports = _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    module.exports = _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nmodule.exports = _typeof;","var defineWellKnownSymbol = require('../internals/define-well-known-symbol');\n\n// `Symbol.iterator` well-known symbol\n// https://tc39.github.io/ecma262/#sec-symbol.iterator\ndefineWellKnownSymbol('iterator');\n","// `Symbol.prototype.description` getter\n// https://tc39.github.io/ecma262/#sec-symbol.prototype.description\n'use strict';\nvar $ = require('../internals/export');\nvar DESCRIPTORS = require('../internals/descriptors');\nvar global = require('../internals/global');\nvar has = require('../internals/has');\nvar isObject = require('../internals/is-object');\nvar defineProperty = require('../internals/object-define-property').f;\nvar copyConstructorProperties = require('../internals/copy-constructor-properties');\n\nvar NativeSymbol = global.Symbol;\n\nif (DESCRIPTORS && typeof NativeSymbol == 'function' && (!('description' in NativeSymbol.prototype) ||\n  // Safari 12 bug\n  NativeSymbol().description !== undefined\n)) {\n  var EmptyStringDescriptionStore = {};\n  // wrap Symbol constructor for correct work with undefined description\n  var SymbolWrapper = function Symbol() {\n    var description = arguments.length < 1 || arguments[0] === undefined ? undefined : String(arguments[0]);\n    var result = this instanceof SymbolWrapper\n      ? new NativeSymbol(description)\n      // in Edge 13, String(Symbol(undefined)) === 'Symbol(undefined)'\n      : description === undefined ? NativeSymbol() : NativeSymbol(description);\n    if (description === '') EmptyStringDescriptionStore[result] = true;\n    return result;\n  };\n  copyConstructorProperties(SymbolWrapper, NativeSymbol);\n  var symbolPrototype = SymbolWrapper.prototype = NativeSymbol.prototype;\n  symbolPrototype.constructor = SymbolWrapper;\n\n  var symbolToString = symbolPrototype.toString;\n  var native = String(NativeSymbol('test')) == 'Symbol(test)';\n  var regexp = /^Symbol\\((.*)\\)[^)]+$/;\n  defineProperty(symbolPrototype, 'description', {\n    configurable: true,\n    get: function description() {\n      var symbol = isObject(this) ? this.valueOf() : this;\n      var string = symbolToString.call(symbol);\n      if (has(EmptyStringDescriptionStore, symbol)) return '';\n      var desc = native ? string.slice(7, -1) : string.replace(regexp, '$1');\n      return desc === '' ? undefined : desc;\n    }\n  });\n\n  $({ global: true, forced: true }, {\n    Symbol: SymbolWrapper\n  });\n}\n"],"sourceRoot":""}