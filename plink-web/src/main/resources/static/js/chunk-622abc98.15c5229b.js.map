{"version":3,"sources":["webpack:///./node_modules/sql-formatter/lib/core/Indentation.js","webpack:///./node_modules/sql-formatter/lib/core/Params.js","webpack:///./node_modules/core-js/modules/es.string.includes.js","webpack:///./node_modules/lodash/_charsEndIndex.js","webpack:///./node_modules/core-js/modules/es.string.trim.js","webpack:///./node_modules/core-js/internals/whitespaces.js","webpack:///./node_modules/core-js/internals/string-trim.js","webpack:///./node_modules/core-js/internals/not-a-regexp.js","webpack:///./node_modules/sql-formatter/lib/core/tokenTypes.js","webpack:///./src/components/SqlCMEditor/modules/Formatter.js","webpack:///./node_modules/lodash/repeat.js","webpack:///./node_modules/core-js/internals/correct-is-regexp-logic.js","webpack:///./node_modules/core-js/internals/string-trim-forced.js","webpack:///./node_modules/core-js/modules/es.array.includes.js","webpack:///./node_modules/sql-formatter/lib/core/InlineBlock.js","webpack:///./node_modules/lodash/trimEnd.js"],"names":["exports","__esModule","_repeat","_repeat2","_interopRequireDefault","_last","_last2","obj","_classCallCheck","instance","Constructor","TypeError","INDENT_TYPE_TOP_LEVEL","INDENT_TYPE_BLOCK_LEVEL","Indentation","indent","this","indentTypes","prototype","getIndent","length","increaseToplevel","push","increaseBlockLevel","decreaseTopLevel","pop","decreaseBlockLevel","type","module","Params","params","index","get","_ref","key","value","$","notARegExp","requireObjectCoercible","correctIsRegExpLogic","target","proto","forced","includes","searchString","String","indexOf","arguments","undefined","baseIndexOf","charsEndIndex","strSymbols","chrSymbols","$trim","trim","forcedStringTrimMethod","whitespaces","whitespace","ltrim","RegExp","rtrim","createMethod","TYPE","$this","string","replace","start","end","isRegExp","it","WHITESPACE","WORD","STRING","RESERVED","RESERVED_TOPLEVEL","RESERVED_NEWLINE","OPERATOR","OPEN_PAREN","CLOSE_PAREN","LINE_COMMENT","BLOCK_COMMENT","NUMBER","PLACEHOLDER","_trimEnd","require","_trimEnd2","_tokenTypes","_tokenTypes2","_Indentation","_Indentation2","_InlineBlock","_InlineBlock2","_Params","_Params2","default","Formatter","cfg","tokenizer","indentation","inlineBlock","previousReservedWord","tokens","format","query","tokenize","formattedQuery","getFormattedQueryFromTokens","_this","forEach","token","formatLineComment","formatBlockComment","formatToplevelReservedWord","formatNewlineReservedWord","formatWithSpaces","formatOpeningParentheses","formatClosingParentheses","formatPlaceholder","formatComma","formatWithSpaceAfter","formatWithoutSpaces","addNewline","previousNonWhitespaceToken","indentComment","comment","equalizeWhitespace","preserveWhitespaceFor","previousToken","beginIfPossible","isActive","trimTrailingWhitespace","test","n","offset","baseRepeat","isIterateeCall","toInteger","toString","repeat","guard","wellKnownSymbol","MATCH","METHOD_NAME","regexp","e","f","fails","non","name","$includes","addToUnscopables","arrayMethodUsesToLength","USES_TO_LENGTH","ACCESSORS","1","el","INLINE_MAX_LENGTH","InlineBlock","level","isInlineBlock","i","isForbiddenToken","COMMENT","baseToString","castSlice","stringToArray","reTrimEnd","trimEnd","chars","join"],"mappings":"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","file":"js/chunk-622abc98.15c5229b.js","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\n\nvar _repeat = require(\"lodash/repeat\");\n\nvar _repeat2 = _interopRequireDefault(_repeat);\n\nvar _last = require(\"lodash/last\");\n\nvar _last2 = _interopRequireDefault(_last);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar INDENT_TYPE_TOP_LEVEL = \"top-level\";\nvar INDENT_TYPE_BLOCK_LEVEL = \"block-level\";\n\n/**\n * Manages indentation levels.\n *\n * There are two types of indentation levels:\n *\n * - BLOCK_LEVEL : increased by open-parenthesis\n * - TOP_LEVEL : increased by RESERVED_TOPLEVEL words\n */\n\nvar Indentation = function () {\n    /**\n     * @param {String} indent Indent value, default is \"  \" (2 spaces)\n     */\n    function Indentation(indent) {\n        _classCallCheck(this, Indentation);\n\n        this.indent = indent || \"  \";\n        this.indentTypes = [];\n    }\n\n    /**\n     * Returns current indentation string.\n     * @return {String}\n     */\n\n\n    Indentation.prototype.getIndent = function getIndent() {\n        return (0, _repeat2[\"default\"])(this.indent, this.indentTypes.length);\n    };\n\n    /**\n     * Increases indentation by one top-level indent.\n     */\n\n\n    Indentation.prototype.increaseToplevel = function increaseToplevel() {\n        this.indentTypes.push(INDENT_TYPE_TOP_LEVEL);\n    };\n\n    /**\n     * Increases indentation by one block-level indent.\n     */\n\n\n    Indentation.prototype.increaseBlockLevel = function increaseBlockLevel() {\n        this.indentTypes.push(INDENT_TYPE_BLOCK_LEVEL);\n    };\n\n    /**\n     * Decreases indentation by one top-level indent.\n     * Does nothing when the previous indent is not top-level.\n     */\n\n\n    Indentation.prototype.decreaseTopLevel = function decreaseTopLevel() {\n        if ((0, _last2[\"default\"])(this.indentTypes) === INDENT_TYPE_TOP_LEVEL) {\n            this.indentTypes.pop();\n        }\n    };\n\n    /**\n     * Decreases indentation by one block-level indent.\n     * If there are top-level indents within the block-level indent,\n     * throws away these as well.\n     */\n\n\n    Indentation.prototype.decreaseBlockLevel = function decreaseBlockLevel() {\n        while (this.indentTypes.length > 0) {\n            var type = this.indentTypes.pop();\n            if (type !== INDENT_TYPE_TOP_LEVEL) {\n                break;\n            }\n        }\n    };\n\n    return Indentation;\n}();\n\nexports[\"default\"] = Indentation;\nmodule.exports = exports[\"default\"];","\"use strict\";\n\nexports.__esModule = true;\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * Handles placeholder replacement with given params.\n */\nvar Params = function () {\n    /**\n     * @param {Object} params\n     */\n    function Params(params) {\n        _classCallCheck(this, Params);\n\n        this.params = params;\n        this.index = 0;\n    }\n\n    /**\n     * Returns param value that matches given placeholder with param key.\n     * @param {Object} token\n     *   @param {String} token.key Placeholder key\n     *   @param {String} token.value Placeholder value\n     * @return {String} param or token.value when params are missing\n     */\n\n\n    Params.prototype.get = function get(_ref) {\n        var key = _ref.key,\n            value = _ref.value;\n\n        if (!this.params) {\n            return value;\n        }\n        if (key) {\n            return this.params[key];\n        }\n        return this.params[this.index++];\n    };\n\n    return Params;\n}();\n\nexports[\"default\"] = Params;\nmodule.exports = exports[\"default\"];","'use strict';\nvar $ = require('../internals/export');\nvar notARegExp = require('../internals/not-a-regexp');\nvar requireObjectCoercible = require('../internals/require-object-coercible');\nvar correctIsRegExpLogic = require('../internals/correct-is-regexp-logic');\n\n// `String.prototype.includes` method\n// https://tc39.github.io/ecma262/#sec-string.prototype.includes\n$({ target: 'String', proto: true, forced: !correctIsRegExpLogic('includes') }, {\n  includes: function includes(searchString /* , position = 0 */) {\n    return !!~String(requireObjectCoercible(this))\n      .indexOf(notARegExp(searchString), arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\n","var baseIndexOf = require('./_baseIndexOf');\n\n/**\n * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol\n * that is not found in the character symbols.\n *\n * @private\n * @param {Array} strSymbols The string symbols to inspect.\n * @param {Array} chrSymbols The character symbols to find.\n * @returns {number} Returns the index of the last unmatched string symbol.\n */\nfunction charsEndIndex(strSymbols, chrSymbols) {\n  var index = strSymbols.length;\n\n  while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}\n  return index;\n}\n\nmodule.exports = charsEndIndex;\n","'use strict';\nvar $ = require('../internals/export');\nvar $trim = require('../internals/string-trim').trim;\nvar forcedStringTrimMethod = require('../internals/string-trim-forced');\n\n// `String.prototype.trim` method\n// https://tc39.github.io/ecma262/#sec-string.prototype.trim\n$({ target: 'String', proto: true, forced: forcedStringTrimMethod('trim') }, {\n  trim: function trim() {\n    return $trim(this);\n  }\n});\n","// a string of all valid unicode whitespaces\n// eslint-disable-next-line max-len\nmodule.exports = '\\u0009\\u000A\\u000B\\u000C\\u000D\\u0020\\u00A0\\u1680\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028\\u2029\\uFEFF';\n","var requireObjectCoercible = require('../internals/require-object-coercible');\nvar whitespaces = require('../internals/whitespaces');\n\nvar whitespace = '[' + whitespaces + ']';\nvar ltrim = RegExp('^' + whitespace + whitespace + '*');\nvar rtrim = RegExp(whitespace + whitespace + '*$');\n\n// `String.prototype.{ trim, trimStart, trimEnd, trimLeft, trimRight }` methods implementation\nvar createMethod = function (TYPE) {\n  return function ($this) {\n    var string = String(requireObjectCoercible($this));\n    if (TYPE & 1) string = string.replace(ltrim, '');\n    if (TYPE & 2) string = string.replace(rtrim, '');\n    return string;\n  };\n};\n\nmodule.exports = {\n  // `String.prototype.{ trimLeft, trimStart }` methods\n  // https://tc39.github.io/ecma262/#sec-string.prototype.trimstart\n  start: createMethod(1),\n  // `String.prototype.{ trimRight, trimEnd }` methods\n  // https://tc39.github.io/ecma262/#sec-string.prototype.trimend\n  end: createMethod(2),\n  // `String.prototype.trim` method\n  // https://tc39.github.io/ecma262/#sec-string.prototype.trim\n  trim: createMethod(3)\n};\n","var isRegExp = require('../internals/is-regexp');\n\nmodule.exports = function (it) {\n  if (isRegExp(it)) {\n    throw TypeError(\"The method doesn't accept regular expressions\");\n  } return it;\n};\n","\"use strict\";\n\nexports.__esModule = true;\n/**\n * Constants for token types\n */\nexports[\"default\"] = {\n    WHITESPACE: \"whitespace\",\n    WORD: \"word\",\n    STRING: \"string\",\n    RESERVED: \"reserved\",\n    RESERVED_TOPLEVEL: \"reserved-toplevel\",\n    RESERVED_NEWLINE: \"reserved-newline\",\n    OPERATOR: \"operator\",\n    OPEN_PAREN: \"open-paren\",\n    CLOSE_PAREN: \"close-paren\",\n    LINE_COMMENT: \"line-comment\",\n    BLOCK_COMMENT: \"block-comment\",\n    NUMBER: \"number\",\n    PLACEHOLDER: \"placeholder\"\n};\nmodule.exports = exports[\"default\"];","\"use strict\";\n\nexports.__esModule = true;\n\nvar _trimEnd = require(\"lodash/trimEnd\");\n\nvar _trimEnd2 = _interopRequireDefault(_trimEnd);\n\nvar _tokenTypes = require(\"sql-formatter/lib/core/tokenTypes\");\n\nvar _tokenTypes2 = _interopRequireDefault(_tokenTypes);\n\nvar _Indentation = require(\"sql-formatter/lib/core/Indentation\");\n\nvar _Indentation2 = _interopRequireDefault(_Indentation);\n\nvar _InlineBlock = require(\"sql-formatter/lib/core/InlineBlock\");\n\nvar _InlineBlock2 = _interopRequireDefault(_InlineBlock);\n\nvar _Params = require(\"sql-formatter/lib/core/Params\");\n\nvar _Params2 = _interopRequireDefault(_Params);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : { default: obj };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar Formatter = (function() {\n  /**\n   * @param {Object} cfg\n   *   @param {Object} cfg.indent\n   *   @param {Object} cfg.params\n   * @param {Tokenizer} tokenizer\n   */\n  function Formatter(cfg, tokenizer) {\n    _classCallCheck(this, Formatter);\n\n    this.cfg = cfg || {};\n    this.indentation = new _Indentation2[\"default\"](this.cfg.indent);\n    this.inlineBlock = new _InlineBlock2[\"default\"]();\n    this.params = new _Params2[\"default\"](this.cfg.params);\n    this.tokenizer = tokenizer;\n    this.previousReservedWord = {};\n    this.tokens = [];\n    this.index = 0;\n  }\n\n  /**\n   * Formats whitespaces in a SQL string to make it easier to read.\n   *\n   * @param {String} query The SQL query string\n   * @return {String} formatted query\n   */\n\n  Formatter.prototype.format = function format(query) {\n    this.tokens = this.tokenizer.tokenize(query);\n    var formattedQuery = this.getFormattedQueryFromTokens();\n\n    return formattedQuery.trim();\n  };\n\n  Formatter.prototype.getFormattedQueryFromTokens = function getFormattedQueryFromTokens() {\n    var _this = this;\n\n    var formattedQuery = \"\";\n\n    this.tokens.forEach(function(token, index) {\n      _this.index = index;\n\n      if (token.type === _tokenTypes2[\"default\"].WHITESPACE) {\n        // ignore (we do our own whitespace formatting)\n      } else if (token.type === _tokenTypes2[\"default\"].LINE_COMMENT) {\n        formattedQuery = _this.formatLineComment(token, formattedQuery);\n      } else if (token.type === _tokenTypes2[\"default\"].BLOCK_COMMENT) {\n        formattedQuery = _this.formatBlockComment(token, formattedQuery);\n      } else if (token.type === _tokenTypes2[\"default\"].RESERVED_TOPLEVEL) {\n        formattedQuery = _this.formatToplevelReservedWord(token, formattedQuery);\n        _this.previousReservedWord = token;\n      } else if (token.type === _tokenTypes2[\"default\"].RESERVED_NEWLINE) {\n        formattedQuery = _this.formatNewlineReservedWord(token, formattedQuery);\n        _this.previousReservedWord = token;\n      } else if (token.type === _tokenTypes2[\"default\"].RESERVED) {\n        formattedQuery = _this.formatWithSpaces(token, formattedQuery);\n        _this.previousReservedWord = token;\n      } else if (token.type === _tokenTypes2[\"default\"].OPEN_PAREN) {\n        formattedQuery = _this.formatOpeningParentheses(token, formattedQuery);\n      } else if (token.type === _tokenTypes2[\"default\"].CLOSE_PAREN) {\n        formattedQuery = _this.formatClosingParentheses(token, formattedQuery);\n      } else if (token.type === _tokenTypes2[\"default\"].PLACEHOLDER) {\n        formattedQuery = _this.formatPlaceholder(token, formattedQuery);\n      } else if (token.value === \",\") {\n        formattedQuery = _this.formatComma(token, formattedQuery);\n      } else if (token.value === \":\") {\n        formattedQuery = _this.formatWithSpaceAfter(token, formattedQuery);\n      } else if (token.value === \".\") {\n        formattedQuery = _this.formatWithoutSpaces(token, formattedQuery);\n      } else if (token.value === \";\") {\n        formattedQuery = _this.addNewline(_this.formatWithoutSpaces(token, formattedQuery)) + \"\\n\";\n      } else {\n        formattedQuery = _this.formatWithSpaces(token, formattedQuery);\n      }\n    });\n    return formattedQuery;\n  };\n\n  Formatter.prototype.formatLineComment = function formatLineComment(token, query) {\n    if (this.previousNonWhitespaceToken() && this.previousNonWhitespaceToken().value === \",\") {\n      query = query.replace(/\\s+$/, \"\") + this.indentation.getIndent();\n    }\n    return this.addNewline(query + token.value);\n  };\n\n  Formatter.prototype.formatBlockComment = function formatBlockComment(token, query) {\n    return this.addNewline(this.addNewline(query) + this.indentComment(token.value));\n  };\n\n  Formatter.prototype.indentComment = function indentComment(comment) {\n    return comment.replace(/\\n/g, \"\\n\" + this.indentation.getIndent());\n  };\n\n  Formatter.prototype.formatToplevelReservedWord = function formatToplevelReservedWord(token, query) {\n    this.indentation.decreaseTopLevel();\n\n    query = this.addNewline(query);\n\n    this.indentation.increaseToplevel();\n\n    query += this.equalizeWhitespace(token.value);\n\n    if (token.value !== \"from\" && token.value !== \"FROM\") {\n      query = this.addNewline(query);\n    } else {\n      query += \" \";\n    }\n\n    return query;\n  };\n\n  Formatter.prototype.formatNewlineReservedWord = function formatNewlineReservedWord(token, query) {\n    return this.addNewline(query) + this.equalizeWhitespace(token.value) + \" \";\n  };\n\n  // Replace any sequence of whitespace characters with single space\n\n  Formatter.prototype.equalizeWhitespace = function equalizeWhitespace(string) {\n    return string.replace(/\\s+/g, \" \");\n  };\n\n  // Opening parentheses increase the block indent level and start a new line\n\n  Formatter.prototype.formatOpeningParentheses = function formatOpeningParentheses(token, query) {\n    // Take out the preceding space unless there was whitespace there in the original query\n    // or another opening parens or line comment\n    var preserveWhitespaceFor = [_tokenTypes2[\"default\"].WHITESPACE, _tokenTypes2[\"default\"].OPEN_PAREN, _tokenTypes2[\"default\"].LINE_COMMENT];\n    if (!preserveWhitespaceFor.includes(this.previousToken().type)) {\n      query = (0, _trimEnd2[\"default\"])(query);\n    }\n    query += token.value;\n\n    this.inlineBlock.beginIfPossible(this.tokens, this.index);\n\n    if (!this.inlineBlock.isActive()) {\n      this.indentation.increaseBlockLevel();\n      query = this.addNewline(query);\n    }\n    return query;\n  };\n\n  // Closing parentheses decrease the block indent level\n\n  Formatter.prototype.formatClosingParentheses = function formatClosingParentheses(token, query) {\n    if (this.inlineBlock.isActive()) {\n      this.inlineBlock.end();\n      return this.formatWithSpaceAfter(token, query);\n    } else {\n      this.indentation.decreaseBlockLevel();\n      return this.formatWithSpaces(token, this.addNewline(query));\n    }\n  };\n\n  Formatter.prototype.formatPlaceholder = function formatPlaceholder(token, query) {\n    return query + this.params.get(token) + \" \";\n  };\n\n  // Commas start a new line (unless within inline parentheses or SQL \"LIMIT\" clause)\n\n  Formatter.prototype.formatComma = function formatComma(token, query) {\n    query = this.trimTrailingWhitespace(query) + token.value + \" \";\n    if (this.inlineBlock.isActive()) {\n      return query;\n    } else if (/^LIMIT$/i.test(this.previousReservedWord.value)) {\n      return query;\n    } else {\n      return this.addNewline(query);\n    }\n  };\n\n  Formatter.prototype.formatWithSpaceAfter = function formatWithSpaceAfter(token, query) {\n    return this.trimTrailingWhitespace(query) + token.value + \" \";\n  };\n\n  Formatter.prototype.formatWithoutSpaces = function formatWithoutSpaces(token, query) {\n    return this.trimTrailingWhitespace(query) + token.value;\n  };\n\n  Formatter.prototype.formatWithSpaces = function formatWithSpaces(token, query) {\n    return query + token.value + \" \";\n  };\n\n  Formatter.prototype.addNewline = function addNewline(query) {\n    return (0, _trimEnd2[\"default\"])(query) + \"\\n\" + this.indentation.getIndent();\n  };\n\n  Formatter.prototype.trimTrailingWhitespace = function trimTrailingWhitespace(query) {\n    if (this.previousNonWhitespaceToken().type === _tokenTypes2[\"default\"].LINE_COMMENT) {\n      return (0, _trimEnd2[\"default\"])(query) + \"\\n\";\n    } else {\n      return (0, _trimEnd2[\"default\"])(query);\n    }\n  };\n\n  Formatter.prototype.previousNonWhitespaceToken = function previousNonWhitespaceToken() {\n    var n = 1;\n    while (this.previousToken(n).type === _tokenTypes2[\"default\"].WHITESPACE) {\n      n++;\n    }\n    return this.previousToken(n);\n  };\n\n  Formatter.prototype.previousToken = function previousToken() {\n    var offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n\n    return this.tokens[this.index - offset] || {};\n  };\n\n  return Formatter;\n})();\n\nexports[\"default\"] = Formatter;\nmodule.exports = exports[\"default\"];\n","var baseRepeat = require('./_baseRepeat'),\n    isIterateeCall = require('./_isIterateeCall'),\n    toInteger = require('./toInteger'),\n    toString = require('./toString');\n\n/**\n * Repeats the given string `n` times.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to repeat.\n * @param {number} [n=1] The number of times to repeat the string.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {string} Returns the repeated string.\n * @example\n *\n * _.repeat('*', 3);\n * // => '***'\n *\n * _.repeat('abc', 2);\n * // => 'abcabc'\n *\n * _.repeat('abc', 0);\n * // => ''\n */\nfunction repeat(string, n, guard) {\n  if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {\n    n = 1;\n  } else {\n    n = toInteger(n);\n  }\n  return baseRepeat(toString(string), n);\n}\n\nmodule.exports = repeat;\n","var wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar MATCH = wellKnownSymbol('match');\n\nmodule.exports = function (METHOD_NAME) {\n  var regexp = /./;\n  try {\n    '/./'[METHOD_NAME](regexp);\n  } catch (e) {\n    try {\n      regexp[MATCH] = false;\n      return '/./'[METHOD_NAME](regexp);\n    } catch (f) { /* empty */ }\n  } return false;\n};\n","var fails = require('../internals/fails');\nvar whitespaces = require('../internals/whitespaces');\n\nvar non = '\\u200B\\u0085\\u180E';\n\n// check that a method works with the correct list\n// of whitespaces and has a correct name\nmodule.exports = function (METHOD_NAME) {\n  return fails(function () {\n    return !!whitespaces[METHOD_NAME]() || non[METHOD_NAME]() != non || whitespaces[METHOD_NAME].name !== METHOD_NAME;\n  });\n};\n","'use strict';\nvar $ = require('../internals/export');\nvar $includes = require('../internals/array-includes').includes;\nvar addToUnscopables = require('../internals/add-to-unscopables');\nvar arrayMethodUsesToLength = require('../internals/array-method-uses-to-length');\n\nvar USES_TO_LENGTH = arrayMethodUsesToLength('indexOf', { ACCESSORS: true, 1: 0 });\n\n// `Array.prototype.includes` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.includes\n$({ target: 'Array', proto: true, forced: !USES_TO_LENGTH }, {\n  includes: function includes(el /* , fromIndex = 0 */) {\n    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\n\n// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables\naddToUnscopables('includes');\n","\"use strict\";\n\nexports.__esModule = true;\n\nvar _tokenTypes = require(\"./tokenTypes\");\n\nvar _tokenTypes2 = _interopRequireDefault(_tokenTypes);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar INLINE_MAX_LENGTH = 50;\n\n/**\n * Bookkeeper for inline blocks.\n *\n * Inline blocks are parenthized expressions that are shorter than INLINE_MAX_LENGTH.\n * These blocks are formatted on a single line, unlike longer parenthized\n * expressions where open-parenthesis causes newline and increase of indentation.\n */\n\nvar InlineBlock = function () {\n    function InlineBlock() {\n        _classCallCheck(this, InlineBlock);\n\n        this.level = 0;\n    }\n\n    /**\n     * Begins inline block when lookahead through upcoming tokens determines\n     * that the block would be smaller than INLINE_MAX_LENGTH.\n     * @param  {Object[]} tokens Array of all tokens\n     * @param  {Number} index Current token position\n     */\n\n\n    InlineBlock.prototype.beginIfPossible = function beginIfPossible(tokens, index) {\n        if (this.level === 0 && this.isInlineBlock(tokens, index)) {\n            this.level = 1;\n        } else if (this.level > 0) {\n            this.level++;\n        } else {\n            this.level = 0;\n        }\n    };\n\n    /**\n     * Finishes current inline block.\n     * There might be several nested ones.\n     */\n\n\n    InlineBlock.prototype.end = function end() {\n        this.level--;\n    };\n\n    /**\n     * True when inside an inline block\n     * @return {Boolean}\n     */\n\n\n    InlineBlock.prototype.isActive = function isActive() {\n        return this.level > 0;\n    };\n\n    // Check if this should be an inline parentheses block\n    // Examples are \"NOW()\", \"COUNT(*)\", \"int(10)\", key(`somecolumn`), DECIMAL(7,2)\n\n\n    InlineBlock.prototype.isInlineBlock = function isInlineBlock(tokens, index) {\n        var length = 0;\n        var level = 0;\n\n        for (var i = index; i < tokens.length; i++) {\n            var token = tokens[i];\n            length += token.value.length;\n\n            // Overran max length\n            if (length > INLINE_MAX_LENGTH) {\n                return false;\n            }\n\n            if (token.type === _tokenTypes2[\"default\"].OPEN_PAREN) {\n                level++;\n            } else if (token.type === _tokenTypes2[\"default\"].CLOSE_PAREN) {\n                level--;\n                if (level === 0) {\n                    return true;\n                }\n            }\n\n            if (this.isForbiddenToken(token)) {\n                return false;\n            }\n        }\n        return false;\n    };\n\n    // Reserved words that cause newlines, comments and semicolons\n    // are not allowed inside inline parentheses block\n\n\n    InlineBlock.prototype.isForbiddenToken = function isForbiddenToken(_ref) {\n        var type = _ref.type,\n            value = _ref.value;\n\n        return type === _tokenTypes2[\"default\"].RESERVED_TOPLEVEL || type === _tokenTypes2[\"default\"].RESERVED_NEWLINE || type === _tokenTypes2[\"default\"].COMMENT || type === _tokenTypes2[\"default\"].BLOCK_COMMENT || value === \";\";\n    };\n\n    return InlineBlock;\n}();\n\nexports[\"default\"] = InlineBlock;\nmodule.exports = exports[\"default\"];","var baseToString = require('./_baseToString'),\n    castSlice = require('./_castSlice'),\n    charsEndIndex = require('./_charsEndIndex'),\n    stringToArray = require('./_stringToArray'),\n    toString = require('./toString');\n\n/** Used to match leading and trailing whitespace. */\nvar reTrimEnd = /\\s+$/;\n\n/**\n * Removes trailing whitespace or specified characters from `string`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category String\n * @param {string} [string=''] The string to trim.\n * @param {string} [chars=whitespace] The characters to trim.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {string} Returns the trimmed string.\n * @example\n *\n * _.trimEnd('  abc  ');\n * // => '  abc'\n *\n * _.trimEnd('-_-abc-_-', '_-');\n * // => '-_-abc'\n */\nfunction trimEnd(string, chars, guard) {\n  string = toString(string);\n  if (string && (guard || chars === undefined)) {\n    return string.replace(reTrimEnd, '');\n  }\n  if (!string || !(chars = baseToString(chars))) {\n    return string;\n  }\n  var strSymbols = stringToArray(string),\n      end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;\n\n  return castSlice(strSymbols, 0, end).join('');\n}\n\nmodule.exports = trimEnd;\n"],"sourceRoot":""}