{"version":3,"sources":["webpack:///./node_modules/lodash/isEmpty.js","webpack:///./node_modules/sql-formatter/lib/core/Indentation.js","webpack:///./node_modules/sql-formatter/lib/core/Params.js","webpack:///./node_modules/core-js/modules/es.string.includes.js","webpack:///./node_modules/lodash/_charsEndIndex.js","webpack:///./node_modules/core-js/modules/es.string.trim.js","webpack:///./node_modules/core-js/internals/whitespaces.js","webpack:///./node_modules/core-js/internals/string-trim.js","webpack:///./node_modules/core-js/internals/not-a-regexp.js","webpack:///./node_modules/sql-formatter/lib/core/tokenTypes.js","webpack:///./src/components/SqlCMEditor/modules/Formatter.js","webpack:///./src/components/SqlCMEditor/modules/sqlFormatter.js","webpack:///./node_modules/lodash/repeat.js","webpack:///./node_modules/lodash/escapeRegExp.js","webpack:///./node_modules/core-js/internals/correct-is-regexp-logic.js","webpack:///./node_modules/sql-formatter/lib/core/Tokenizer.js","webpack:///./node_modules/core-js/internals/string-trim-forced.js","webpack:///./node_modules/core-js/modules/es.array.includes.js","webpack:///./node_modules/sql-formatter/lib/core/InlineBlock.js","webpack:///./node_modules/lodash/trimEnd.js"],"names":["baseKeys","getTag","isArguments","isArray","isArrayLike","isBuffer","isPrototype","isTypedArray","mapTag","setTag","objectProto","Object","prototype","hasOwnProperty","isEmpty","value","splice","length","tag","size","key","call","module","exports","__esModule","_repeat","_repeat2","_interopRequireDefault","_last","_last2","obj","_classCallCheck","instance","Constructor","TypeError","INDENT_TYPE_TOP_LEVEL","INDENT_TYPE_BLOCK_LEVEL","Indentation","indent","this","indentTypes","getIndent","increaseToplevel","push","increaseBlockLevel","decreaseTopLevel","pop","decreaseBlockLevel","type","Params","params","index","get","_ref","$","notARegExp","requireObjectCoercible","correctIsRegExpLogic","target","proto","forced","includes","searchString","String","indexOf","arguments","undefined","baseIndexOf","charsEndIndex","strSymbols","chrSymbols","$trim","trim","forcedStringTrimMethod","whitespaces","whitespace","ltrim","RegExp","rtrim","createMethod","TYPE","$this","string","replace","start","end","isRegExp","it","WHITESPACE","WORD","STRING","RESERVED","RESERVED_TOPLEVEL","RESERVED_NEWLINE","OPERATOR","OPEN_PAREN","CLOSE_PAREN","LINE_COMMENT","BLOCK_COMMENT","NUMBER","PLACEHOLDER","_trimEnd","require","_trimEnd2","_tokenTypes","_tokenTypes2","_Indentation","_Indentation2","_InlineBlock","_InlineBlock2","_Params","_Params2","default","Formatter","cfg","tokenizer","indentation","inlineBlock","previousReservedWord","tokens","format","query","tokenize","formattedQuery","getFormattedQueryFromTokens","_this","forEach","token","formatLineComment","formatBlockComment","formatToplevelReservedWord","formatNewlineReservedWord","formatWithSpaces","formatOpeningParentheses","formatClosingParentheses","formatPlaceholder","formatComma","formatWithSpaceAfter","formatWithoutSpaces","addNewline","previousNonWhitespaceToken","indentComment","comment","equalizeWhitespace","preserveWhitespaceFor","previousToken","beginIfPossible","isActive","trimTrailingWhitespace","test","n","offset","_Formatter","_Formatter2","_Tokenizer","_Tokenizer2","reservedWords","reservedToplevelWords","reservedNewlineWords","StandardSqlFormatter","stringTypes","openParens","closeParens","indexedPlaceholderTypes","namedPlaceholderTypes","lineCommentTypes","baseRepeat","isIterateeCall","toInteger","toString","repeat","guard","reRegExpChar","reHasRegExpChar","source","escapeRegExp","wellKnownSymbol","MATCH","METHOD_NAME","regexp","e","f","_isEmpty","_isEmpty2","_escapeRegExp","_escapeRegExp2","Tokenizer","WHITESPACE_REGEX","NUMBER_REGEX","OPERATOR_REGEX","BLOCK_COMMENT_REGEX","LINE_COMMENT_REGEX","createLineCommentRegex","RESERVED_TOPLEVEL_REGEX","createReservedWordRegex","RESERVED_NEWLINE_REGEX","RESERVED_PLAIN_REGEX","WORD_REGEX","createWordRegex","specialWordChars","STRING_REGEX","createStringRegex","OPEN_PAREN_REGEX","createParenRegex","CLOSE_PAREN_REGEX","INDEXED_PLACEHOLDER_REGEX","createPlaceholderRegex","IDENT_NAMED_PLACEHOLDER_REGEX","STRING_NAMED_PLACEHOLDER_REGEX","createStringPattern","map","c","join","reservedWordsPattern","specialChars","patterns","t","parens","p","escapeParen","paren","types","pattern","typesRegex","input","getNextToken","substring","getWhitespaceToken","getCommentToken","getStringToken","getOpenParenToken","getCloseParenToken","getPlaceholderToken","getNumberToken","getReservedWordToken","getWordToken","getOperatorToken","getTokenOnFirstMatch","regex","getLineCommentToken","getBlockCommentToken","getIdentNamedPlaceholderToken","getStringNamedPlaceholderToken","getIndexedPlaceholderToken","getPlaceholderTokenWithKey","parseKey","v","slice","_this2","getEscapedPlaceholderKey","quoteChar","_ref2","getToplevelReservedToken","getNewlineReservedToken","getPlainReservedToken","_ref3","matches","match","fails","non","name","$includes","addToUnscopables","arrayMethodUsesToLength","USES_TO_LENGTH","ACCESSORS","1","el","INLINE_MAX_LENGTH","InlineBlock","level","isInlineBlock","i","isForbiddenToken","COMMENT","baseToString","castSlice","stringToArray","reTrimEnd","trimEnd","chars"],"mappings":"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AQC,YAAa,EAErB,IAAIgI,EAAalD,EAAQ,QAErBmD,EAAc9H,EAAuB6H,GAErCE,EAAapD,EAAQ,QAErBqD,EAAchI,EAAuB+H,GAEzC,SAAS/H,EAAuBG,GAC9B,OAAOA,GAAOA,EAAIN,WAAaM,EAAM,CAAEkF,QAASlF,GAGlD,SAASC,EAAgBC,EAAUC,GACjC,KAAMD,aAAoBC,GACxB,MAAM,IAAIC,UAAU,qCAKxB,IAAI0H,EAAgB,CAClB,cACA,aACA,SACA,UACA,YACA,YACA,MACA,QACA,UACA,UACA,KACA,MACA,aACA,iBACA,SACA,QACA,UACA,SACA,OACA,UACA,OACA,SACA,UACA,gBACA,UACA,QACA,WACA,UACA,YACA,SACA,UACA,UACA,SACA,YACA,aACA,aACA,aACA,WACA,UACA,SACA,QACA,oBACA,WACA,YACA,MACA,WACA,aACA,aACA,UACA,UACA,UACA,SACA,OACA,WACA,gBACA,WACA,cACA,MACA,KACA,OACA,WACA,YACA,UACA,OACA,WACA,MACA,SACA,UACA,cACA,SACA,UACA,SACA,OACA,UACA,SACA,UACA,WACA,OACA,QACA,SACA,OACA,QACA,QACA,QACA,MACA,QACA,UACA,OACA,WACA,WACA,SACA,QACA,SACA,eACA,OACA,gBACA,QACA,OACA,cACA,cACA,aACA,KACA,SACA,SACA,KACA,QACA,UACA,SACA,SACA,YACA,gBACA,WACA,OACA,UACA,KACA,YACA,MACA,OACA,OACA,iBACA,UACA,QACA,OACA,SACA,QACA,OACA,QACA,OACA,QACA,OACA,eACA,QACA,SACA,uBACA,cACA,kBACA,QACA,2BACA,uBACA,WACA,uBACA,uBACA,SACA,QACA,SACA,gBACA,WACA,OACA,SACA,QACA,aACA,SACA,QACA,UACA,MACA,QACA,OACA,SACA,YACA,YACA,KACA,OACA,OACA,WACA,SACA,aACA,UACA,YACA,OACA,UACA,YACA,aACA,WACA,UACA,aACA,YACA,UACA,cACA,QACA,QACA,QACA,cACA,iBACA,YACA,QACA,OACA,YACA,aACA,aACA,SACA,SACA,SACA,SACA,aACA,UACA,cACA,QACA,UACA,WACA,SACA,UACA,SACA,QACA,WACA,MACA,OACA,aACA,SACA,WACA,YACA,eACA,UACA,QACA,OACA,WACA,QACA,SACA,SACA,MACA,mBACA,iBACA,kBACA,iBACA,oBACA,YACA,sBACA,cACA,cACA,iBACA,2BACA,oBACA,eACA,wBACA,mBACA,mBACA,yBACA,mBACA,eACA,QACA,WACA,SACA,OACA,UACA,gBACA,SACA,UACA,QACA,QACA,SACA,YACA,aACA,OACA,KACA,WACA,gBACA,OACA,WACA,OACA,QACA,cACA,SACA,SACA,WACA,QACA,MACA,QACA,YACA,OACA,OACA,OACA,OACA,QACA,cAIEC,EAAwB,CAC1B,MACA,QACA,eACA,cACA,cACA,SACA,cACA,OACA,WACA,KACA,SACA,YACA,QACA,SACA,WACA,SACA,qBACA,aACA,MACA,YACA,QACA,SACA,SACA,SAIEC,EAAuB,CACzB,MACA,cACA,aACA,OACA,aACA,OACA,YACA,kBACA,KACA,cACA,aACA,aACA,mBACA,OACA,OAGE3C,OAAY,EAEZ4C,EAAwB,WAI1B,SAASA,EAAqB7C,GAC5BnF,EAAgBQ,KAAMwH,GAEtBxH,KAAK2E,IAAMA,EA2Bb,OAjBA6C,EAAqBnJ,UAAU4G,OAAS,SAAgBC,GActD,OAbKN,IACHA,EAAY,IAAIwC,EAAY,WAAW,CACrCC,cAAeA,EACfC,sBAAuBA,EACvBC,qBAAsBA,EACtBE,YAAa,CAAC,KAAM,MAAO,KAAM,KAAM,MACvCC,WAAY,CAAC,IAAK,QAClBC,YAAa,CAAC,IAAK,OACnBC,wBAAyB,CAAC,KAC1BC,sBAAuB,CAAC,IAAK,KAC7BC,iBAAkB,CAAC,IAAK,SAGrB,IAAIZ,EAAY,WAAWlH,KAAK2E,IAAKC,GAAWK,OAAOC,IAGzDsC,EAlCmB,GAoC5BxI,EAAQ,WAAa,CAWnBiG,OAAQ,SAAgBC,EAAOP,GAE7B,OADAA,EAAMA,GAAO,GACN,IAAI6C,EAAqB7C,GAAKM,OAAOC,KA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","file":"js/chunk-25af778d.029fc19f.js","sourcesContent":["var baseKeys = require('./_baseKeys'),\n    getTag = require('./_getTag'),\n    isArguments = require('./isArguments'),\n    isArray = require('./isArray'),\n    isArrayLike = require('./isArrayLike'),\n    isBuffer = require('./isBuffer'),\n    isPrototype = require('./_isPrototype'),\n    isTypedArray = require('./isTypedArray');\n\n/** `Object#toString` result references. */\nvar mapTag = '[object Map]',\n    setTag = '[object Set]';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Checks if `value` is an empty object, collection, map, or set.\n *\n * Objects are considered empty if they have no own enumerable string keyed\n * properties.\n *\n * Array-like values such as `arguments` objects, arrays, buffers, strings, or\n * jQuery-like collections are considered empty if they have a `length` of `0`.\n * Similarly, maps and sets are considered empty if they have a `size` of `0`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is empty, else `false`.\n * @example\n *\n * _.isEmpty(null);\n * // => true\n *\n * _.isEmpty(true);\n * // => true\n *\n * _.isEmpty(1);\n * // => true\n *\n * _.isEmpty([1, 2, 3]);\n * // => false\n *\n * _.isEmpty({ 'a': 1 });\n * // => false\n */\nfunction isEmpty(value) {\n  if (value == null) {\n    return true;\n  }\n  if (isArrayLike(value) &&\n      (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||\n        isBuffer(value) || isTypedArray(value) || isArguments(value))) {\n    return !value.length;\n  }\n  var tag = getTag(value);\n  if (tag == mapTag || tag == setTag) {\n    return !value.size;\n  }\n  if (isPrototype(value)) {\n    return !baseKeys(value).length;\n  }\n  for (var key in value) {\n    if (hasOwnProperty.call(value, key)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nmodule.exports = isEmpty;\n","\"use strict\";\n\nexports.__esModule = true;\n\nvar _repeat = require(\"lodash/repeat\");\n\nvar _repeat2 = _interopRequireDefault(_repeat);\n\nvar _last = require(\"lodash/last\");\n\nvar _last2 = _interopRequireDefault(_last);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar INDENT_TYPE_TOP_LEVEL = \"top-level\";\nvar INDENT_TYPE_BLOCK_LEVEL = \"block-level\";\n\n/**\n * Manages indentation levels.\n *\n * There are two types of indentation levels:\n *\n * - BLOCK_LEVEL : increased by open-parenthesis\n * - TOP_LEVEL : increased by RESERVED_TOPLEVEL words\n */\n\nvar Indentation = function () {\n    /**\n     * @param {String} indent Indent value, default is \"  \" (2 spaces)\n     */\n    function Indentation(indent) {\n        _classCallCheck(this, Indentation);\n\n        this.indent = indent || \"  \";\n        this.indentTypes = [];\n    }\n\n    /**\n     * Returns current indentation string.\n     * @return {String}\n     */\n\n\n    Indentation.prototype.getIndent = function getIndent() {\n        return (0, _repeat2[\"default\"])(this.indent, this.indentTypes.length);\n    };\n\n    /**\n     * Increases indentation by one top-level indent.\n     */\n\n\n    Indentation.prototype.increaseToplevel = function increaseToplevel() {\n        this.indentTypes.push(INDENT_TYPE_TOP_LEVEL);\n    };\n\n    /**\n     * Increases indentation by one block-level indent.\n     */\n\n\n    Indentation.prototype.increaseBlockLevel = function increaseBlockLevel() {\n        this.indentTypes.push(INDENT_TYPE_BLOCK_LEVEL);\n    };\n\n    /**\n     * Decreases indentation by one top-level indent.\n     * Does nothing when the previous indent is not top-level.\n     */\n\n\n    Indentation.prototype.decreaseTopLevel = function decreaseTopLevel() {\n        if ((0, _last2[\"default\"])(this.indentTypes) === INDENT_TYPE_TOP_LEVEL) {\n            this.indentTypes.pop();\n        }\n    };\n\n    /**\n     * Decreases indentation by one block-level indent.\n     * If there are top-level indents within the block-level indent,\n     * throws away these as well.\n     */\n\n\n    Indentation.prototype.decreaseBlockLevel = function decreaseBlockLevel() {\n        while (this.indentTypes.length > 0) {\n            var type = this.indentTypes.pop();\n            if (type !== INDENT_TYPE_TOP_LEVEL) {\n                break;\n            }\n        }\n    };\n\n    return Indentation;\n}();\n\nexports[\"default\"] = Indentation;\nmodule.exports = exports[\"default\"];","\"use strict\";\n\nexports.__esModule = true;\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * Handles placeholder replacement with given params.\n */\nvar Params = function () {\n    /**\n     * @param {Object} params\n     */\n    function Params(params) {\n        _classCallCheck(this, Params);\n\n        this.params = params;\n        this.index = 0;\n    }\n\n    /**\n     * Returns param value that matches given placeholder with param key.\n     * @param {Object} token\n     *   @param {String} token.key Placeholder key\n     *   @param {String} token.value Placeholder value\n     * @return {String} param or token.value when params are missing\n     */\n\n\n    Params.prototype.get = function get(_ref) {\n        var key = _ref.key,\n            value = _ref.value;\n\n        if (!this.params) {\n            return value;\n        }\n        if (key) {\n            return this.params[key];\n        }\n        return this.params[this.index++];\n    };\n\n    return Params;\n}();\n\nexports[\"default\"] = Params;\nmodule.exports = exports[\"default\"];","'use strict';\nvar $ = require('../internals/export');\nvar notARegExp = require('../internals/not-a-regexp');\nvar requireObjectCoercible = require('../internals/require-object-coercible');\nvar correctIsRegExpLogic = require('../internals/correct-is-regexp-logic');\n\n// `String.prototype.includes` method\n// https://tc39.github.io/ecma262/#sec-string.prototype.includes\n$({ target: 'String', proto: true, forced: !correctIsRegExpLogic('includes') }, {\n  includes: function includes(searchString /* , position = 0 */) {\n    return !!~String(requireObjectCoercible(this))\n      .indexOf(notARegExp(searchString), arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\n","var baseIndexOf = require('./_baseIndexOf');\n\n/**\n * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol\n * that is not found in the character symbols.\n *\n * @private\n * @param {Array} strSymbols The string symbols to inspect.\n * @param {Array} chrSymbols The character symbols to find.\n * @returns {number} Returns the index of the last unmatched string symbol.\n */\nfunction charsEndIndex(strSymbols, chrSymbols) {\n  var index = strSymbols.length;\n\n  while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}\n  return index;\n}\n\nmodule.exports = charsEndIndex;\n","'use strict';\nvar $ = require('../internals/export');\nvar $trim = require('../internals/string-trim').trim;\nvar forcedStringTrimMethod = require('../internals/string-trim-forced');\n\n// `String.prototype.trim` method\n// https://tc39.github.io/ecma262/#sec-string.prototype.trim\n$({ target: 'String', proto: true, forced: forcedStringTrimMethod('trim') }, {\n  trim: function trim() {\n    return $trim(this);\n  }\n});\n","// a string of all valid unicode whitespaces\n// eslint-disable-next-line max-len\nmodule.exports = '\\u0009\\u000A\\u000B\\u000C\\u000D\\u0020\\u00A0\\u1680\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028\\u2029\\uFEFF';\n","var requireObjectCoercible = require('../internals/require-object-coercible');\nvar whitespaces = require('../internals/whitespaces');\n\nvar whitespace = '[' + whitespaces + ']';\nvar ltrim = RegExp('^' + whitespace + whitespace + '*');\nvar rtrim = RegExp(whitespace + whitespace + '*$');\n\n// `String.prototype.{ trim, trimStart, trimEnd, trimLeft, trimRight }` methods implementation\nvar createMethod = function (TYPE) {\n  return function ($this) {\n    var string = String(requireObjectCoercible($this));\n    if (TYPE & 1) string = string.replace(ltrim, '');\n    if (TYPE & 2) string = string.replace(rtrim, '');\n    return string;\n  };\n};\n\nmodule.exports = {\n  // `String.prototype.{ trimLeft, trimStart }` methods\n  // https://tc39.github.io/ecma262/#sec-string.prototype.trimstart\n  start: createMethod(1),\n  // `String.prototype.{ trimRight, trimEnd }` methods\n  // https://tc39.github.io/ecma262/#sec-string.prototype.trimend\n  end: createMethod(2),\n  // `String.prototype.trim` method\n  // https://tc39.github.io/ecma262/#sec-string.prototype.trim\n  trim: createMethod(3)\n};\n","var isRegExp = require('../internals/is-regexp');\n\nmodule.exports = function (it) {\n  if (isRegExp(it)) {\n    throw TypeError(\"The method doesn't accept regular expressions\");\n  } return it;\n};\n","\"use strict\";\n\nexports.__esModule = true;\n/**\n * Constants for token types\n */\nexports[\"default\"] = {\n    WHITESPACE: \"whitespace\",\n    WORD: \"word\",\n    STRING: \"string\",\n    RESERVED: \"reserved\",\n    RESERVED_TOPLEVEL: \"reserved-toplevel\",\n    RESERVED_NEWLINE: \"reserved-newline\",\n    OPERATOR: \"operator\",\n    OPEN_PAREN: \"open-paren\",\n    CLOSE_PAREN: \"close-paren\",\n    LINE_COMMENT: \"line-comment\",\n    BLOCK_COMMENT: \"block-comment\",\n    NUMBER: \"number\",\n    PLACEHOLDER: \"placeholder\"\n};\nmodule.exports = exports[\"default\"];","\"use strict\";\n\nexports.__esModule = true;\n\nvar _trimEnd = require(\"lodash/trimEnd\");\n\nvar _trimEnd2 = _interopRequireDefault(_trimEnd);\n\nvar _tokenTypes = require(\"sql-formatter/lib/core/tokenTypes\");\n\nvar _tokenTypes2 = _interopRequireDefault(_tokenTypes);\n\nvar _Indentation = require(\"sql-formatter/lib/core/Indentation\");\n\nvar _Indentation2 = _interopRequireDefault(_Indentation);\n\nvar _InlineBlock = require(\"sql-formatter/lib/core/InlineBlock\");\n\nvar _InlineBlock2 = _interopRequireDefault(_InlineBlock);\n\nvar _Params = require(\"sql-formatter/lib/core/Params\");\n\nvar _Params2 = _interopRequireDefault(_Params);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : { default: obj };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar Formatter = (function() {\n  /**\n   * @param {Object} cfg\n   *   @param {Object} cfg.indent\n   *   @param {Object} cfg.params\n   * @param {Tokenizer} tokenizer\n   */\n  function Formatter(cfg, tokenizer) {\n    _classCallCheck(this, Formatter);\n\n    this.cfg = cfg || {};\n    this.indentation = new _Indentation2[\"default\"](this.cfg.indent);\n    this.inlineBlock = new _InlineBlock2[\"default\"]();\n    this.params = new _Params2[\"default\"](this.cfg.params);\n    this.tokenizer = tokenizer;\n    this.previousReservedWord = {};\n    this.tokens = [];\n    this.index = 0;\n  }\n\n  /**\n   * Formats whitespaces in a SQL string to make it easier to read.\n   *\n   * @param {String} query The SQL query string\n   * @return {String} formatted query\n   */\n\n  Formatter.prototype.format = function format(query) {\n    this.tokens = this.tokenizer.tokenize(query);\n    var formattedQuery = this.getFormattedQueryFromTokens();\n\n    return formattedQuery.trim();\n  };\n\n  Formatter.prototype.getFormattedQueryFromTokens = function getFormattedQueryFromTokens() {\n    var _this = this;\n\n    var formattedQuery = \"\";\n\n    this.tokens.forEach(function(token, index) {\n      _this.index = index;\n\n      if (token.type === _tokenTypes2[\"default\"].WHITESPACE) {\n        // ignore (we do our own whitespace formatting)\n      } else if (token.type === _tokenTypes2[\"default\"].LINE_COMMENT) {\n        formattedQuery = _this.formatLineComment(token, formattedQuery);\n      } else if (token.type === _tokenTypes2[\"default\"].BLOCK_COMMENT) {\n        formattedQuery = _this.formatBlockComment(token, formattedQuery);\n      } else if (token.type === _tokenTypes2[\"default\"].RESERVED_TOPLEVEL) {\n        formattedQuery = _this.formatToplevelReservedWord(token, formattedQuery);\n        _this.previousReservedWord = token;\n      } else if (token.type === _tokenTypes2[\"default\"].RESERVED_NEWLINE) {\n        formattedQuery = _this.formatNewlineReservedWord(token, formattedQuery);\n        _this.previousReservedWord = token;\n      } else if (token.type === _tokenTypes2[\"default\"].RESERVED) {\n        formattedQuery = _this.formatWithSpaces(token, formattedQuery);\n        _this.previousReservedWord = token;\n      } else if (token.type === _tokenTypes2[\"default\"].OPEN_PAREN) {\n        formattedQuery = _this.formatOpeningParentheses(token, formattedQuery);\n      } else if (token.type === _tokenTypes2[\"default\"].CLOSE_PAREN) {\n        formattedQuery = _this.formatClosingParentheses(token, formattedQuery);\n      } else if (token.type === _tokenTypes2[\"default\"].PLACEHOLDER) {\n        formattedQuery = _this.formatPlaceholder(token, formattedQuery);\n      } else if (token.value === \",\") {\n        formattedQuery = _this.formatComma(token, formattedQuery);\n      } else if (token.value === \":\") {\n        formattedQuery = _this.formatWithSpaceAfter(token, formattedQuery);\n      } else if (token.value === \".\") {\n        formattedQuery = _this.formatWithoutSpaces(token, formattedQuery);\n      } else if (token.value === \";\") {\n        formattedQuery = _this.addNewline(_this.formatWithoutSpaces(token, formattedQuery)) + \"\\n\";\n      } else {\n        formattedQuery = _this.formatWithSpaces(token, formattedQuery);\n      }\n    });\n    return formattedQuery;\n  };\n\n  Formatter.prototype.formatLineComment = function formatLineComment(token, query) {\n    if (this.previousNonWhitespaceToken() && this.previousNonWhitespaceToken().value === \",\") {\n      query = query.replace(/\\s+$/, \"\") + this.indentation.getIndent();\n    }\n    return this.addNewline(query + token.value);\n  };\n\n  Formatter.prototype.formatBlockComment = function formatBlockComment(token, query) {\n    return this.addNewline(this.addNewline(query) + this.indentComment(token.value));\n  };\n\n  Formatter.prototype.indentComment = function indentComment(comment) {\n    return comment.replace(/\\n/g, \"\\n\" + this.indentation.getIndent());\n  };\n\n  Formatter.prototype.formatToplevelReservedWord = function formatToplevelReservedWord(token, query) {\n    this.indentation.decreaseTopLevel();\n\n    query = this.addNewline(query);\n\n    this.indentation.increaseToplevel();\n\n    query += this.equalizeWhitespace(token.value);\n\n    if (token.value !== \"from\" && token.value !== \"FROM\") {\n      query = this.addNewline(query);\n    } else {\n      query += \" \";\n    }\n\n    return query;\n  };\n\n  Formatter.prototype.formatNewlineReservedWord = function formatNewlineReservedWord(token, query) {\n    return this.addNewline(query) + this.equalizeWhitespace(token.value) + \" \";\n  };\n\n  // Replace any sequence of whitespace characters with single space\n\n  Formatter.prototype.equalizeWhitespace = function equalizeWhitespace(string) {\n    return string.replace(/\\s+/g, \" \");\n  };\n\n  // Opening parentheses increase the block indent level and start a new line\n\n  Formatter.prototype.formatOpeningParentheses = function formatOpeningParentheses(token, query) {\n    // Take out the preceding space unless there was whitespace there in the original query\n    // or another opening parens or line comment\n    var preserveWhitespaceFor = [_tokenTypes2[\"default\"].WHITESPACE, _tokenTypes2[\"default\"].OPEN_PAREN, _tokenTypes2[\"default\"].LINE_COMMENT];\n    if (!preserveWhitespaceFor.includes(this.previousToken().type)) {\n      query = (0, _trimEnd2[\"default\"])(query);\n    }\n    query += token.value;\n\n    this.inlineBlock.beginIfPossible(this.tokens, this.index);\n\n    if (!this.inlineBlock.isActive()) {\n      this.indentation.increaseBlockLevel();\n      query = this.addNewline(query);\n    }\n    return query;\n  };\n\n  // Closing parentheses decrease the block indent level\n\n  Formatter.prototype.formatClosingParentheses = function formatClosingParentheses(token, query) {\n    if (this.inlineBlock.isActive()) {\n      this.inlineBlock.end();\n      return this.formatWithSpaceAfter(token, query);\n    } else {\n      this.indentation.decreaseBlockLevel();\n      return this.formatWithSpaces(token, this.addNewline(query));\n    }\n  };\n\n  Formatter.prototype.formatPlaceholder = function formatPlaceholder(token, query) {\n    return query + this.params.get(token) + \" \";\n  };\n\n  // Commas start a new line (unless within inline parentheses or SQL \"LIMIT\" clause)\n\n  Formatter.prototype.formatComma = function formatComma(token, query) {\n    query = this.trimTrailingWhitespace(query) + token.value + \" \";\n    if (this.inlineBlock.isActive()) {\n      return query;\n    } else if (/^LIMIT$/i.test(this.previousReservedWord.value)) {\n      return query;\n    } else {\n      return this.addNewline(query);\n    }\n  };\n\n  Formatter.prototype.formatWithSpaceAfter = function formatWithSpaceAfter(token, query) {\n    return this.trimTrailingWhitespace(query) + token.value + \" \";\n  };\n\n  Formatter.prototype.formatWithoutSpaces = function formatWithoutSpaces(token, query) {\n    return this.trimTrailingWhitespace(query) + token.value;\n  };\n\n  Formatter.prototype.formatWithSpaces = function formatWithSpaces(token, query) {\n    return query + token.value + \" \";\n  };\n\n  Formatter.prototype.addNewline = function addNewline(query) {\n    return (0, _trimEnd2[\"default\"])(query) + \"\\n\" + this.indentation.getIndent();\n  };\n\n  Formatter.prototype.trimTrailingWhitespace = function trimTrailingWhitespace(query) {\n    if (this.previousNonWhitespaceToken().type === _tokenTypes2[\"default\"].LINE_COMMENT) {\n      return (0, _trimEnd2[\"default\"])(query) + \"\\n\";\n    } else {\n      return (0, _trimEnd2[\"default\"])(query);\n    }\n  };\n\n  Formatter.prototype.previousNonWhitespaceToken = function previousNonWhitespaceToken() {\n    var n = 1;\n    while (this.previousToken(n).type === _tokenTypes2[\"default\"].WHITESPACE) {\n      n++;\n    }\n    return this.previousToken(n);\n  };\n\n  Formatter.prototype.previousToken = function previousToken() {\n    var offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n\n    return this.tokens[this.index - offset] || {};\n  };\n\n  return Formatter;\n})();\n\nexports[\"default\"] = Formatter;\nmodule.exports = exports[\"default\"];\n","\"use strict\";\n\nexports.__esModule = true;\n\nvar _Formatter = require(\"./Formatter\");\n\nvar _Formatter2 = _interopRequireDefault(_Formatter);\n\nvar _Tokenizer = require(\"sql-formatter/lib/core/Tokenizer\");\n\nvar _Tokenizer2 = _interopRequireDefault(_Tokenizer);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : { default: obj };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\n//前后空格\nvar reservedWords = [\n  \"INSERT INTO\",\n  \"ACCESSIBLE\",\n  \"ACTION\",\n  \"AGAINST\",\n  \"AGGREGATE\",\n  \"ALGORITHM\",\n  \"ALL\",\n  \"ALTER\",\n  \"ANALYSE\",\n  \"ANALYZE\",\n  \"AS\",\n  \"ASC\",\n  \"AUTOCOMMIT\",\n  \"AUTO_INCREMENT\",\n  \"BACKUP\",\n  \"BEGIN\",\n  \"BETWEEN\",\n  \"BINLOG\",\n  \"BOTH\",\n  \"CASCADE\",\n  \"CASE\",\n  \"CHANGE\",\n  \"CHANGED\",\n  \"CHARACTER SET\",\n  \"CHARSET\",\n  \"CHECK\",\n  \"CHECKSUM\",\n  \"COLLATE\",\n  \"COLLATION\",\n  \"COLUMN\",\n  \"COLUMNS\",\n  \"COMMENT\",\n  \"COMMIT\",\n  \"COMMITTED\",\n  \"COMPRESSED\",\n  \"CONCURRENT\",\n  \"CONSTRAINT\",\n  \"CONTAINS\",\n  \"CONVERT\",\n  \"CREATE\",\n  \"CROSS\",\n  \"CURRENT_TIMESTAMP\",\n  \"DATABASE\",\n  \"DATABASES\",\n  \"DAY\",\n  \"DAY_HOUR\",\n  \"DAY_MINUTE\",\n  \"DAY_SECOND\",\n  \"DEFAULT\",\n  \"DEFINER\",\n  \"DELAYED\",\n  \"DELETE\",\n  \"DESC\",\n  \"DESCRIBE\",\n  \"DETERMINISTIC\",\n  \"DISTINCT\",\n  \"DISTINCTROW\",\n  \"DIV\",\n  \"DO\",\n  \"DROP\",\n  \"DUMPFILE\",\n  \"DUPLICATE\",\n  \"DYNAMIC\",\n  \"ELSE\",\n  \"ENCLOSED\",\n  \"END\",\n  \"ENGINE\",\n  \"ENGINES\",\n  \"ENGINE_TYPE\",\n  \"ESCAPE\",\n  \"ESCAPED\",\n  \"EVENTS\",\n  \"EXEC\",\n  \"EXECUTE\",\n  \"EXISTS\",\n  \"EXPLAIN\",\n  \"EXTENDED\",\n  \"FAST\",\n  \"FETCH\",\n  \"FIELDS\",\n  \"FILE\",\n  \"FIRST\",\n  \"FIXED\",\n  \"FLUSH\",\n  \"FOR\",\n  \"FORCE\",\n  \"FOREIGN\",\n  \"FULL\",\n  \"FULLTEXT\",\n  \"FUNCTION\",\n  \"GLOBAL\",\n  \"GRANT\",\n  \"GRANTS\",\n  \"GROUP_CONCAT\",\n  \"HEAP\",\n  \"HIGH_PRIORITY\",\n  \"HOSTS\",\n  \"HOUR\",\n  \"HOUR_MINUTE\",\n  \"HOUR_SECOND\",\n  \"IDENTIFIED\",\n  \"IF\",\n  \"IFNULL\",\n  \"IGNORE\",\n  \"IN\",\n  \"INDEX\",\n  \"INDEXES\",\n  \"INFILE\",\n  \"INSERT\",\n  \"INSERT_ID\",\n  \"INSERT_METHOD\",\n  \"INTERVAL\",\n  \"INTO\",\n  \"INVOKER\",\n  \"IS\",\n  \"ISOLATION\",\n  \"KEY\",\n  \"KEYS\",\n  \"KILL\",\n  \"LAST_INSERT_ID\",\n  \"LEADING\",\n  \"LEVEL\",\n  \"LIKE\",\n  \"LINEAR\",\n  \"LINES\",\n  \"LOAD\",\n  \"LOCAL\",\n  \"LOCK\",\n  \"LOCKS\",\n  \"LOGS\",\n  \"LOW_PRIORITY\",\n  \"MARIA\",\n  \"MASTER\",\n  \"MASTER_CONNECT_RETRY\",\n  \"MASTER_HOST\",\n  \"MASTER_LOG_FILE\",\n  \"MATCH\",\n  \"MAX_CONNECTIONS_PER_HOUR\",\n  \"MAX_QUERIES_PER_HOUR\",\n  \"MAX_ROWS\",\n  \"MAX_UPDATES_PER_HOUR\",\n  \"MAX_USER_CONNECTIONS\",\n  \"MEDIUM\",\n  \"MERGE\",\n  \"MINUTE\",\n  \"MINUTE_SECOND\",\n  \"MIN_ROWS\",\n  \"MODE\",\n  \"MODIFY\",\n  \"MONTH\",\n  \"MRG_MYISAM\",\n  \"MYISAM\",\n  \"NAMES\",\n  \"NATURAL\",\n  \"NOT\",\n  \"NOW()\",\n  \"NULL\",\n  \"OFFSET\",\n  \"ON DELETE\",\n  \"ON UPDATE\",\n  \"ON\",\n  \"ONLY\",\n  \"OPEN\",\n  \"OPTIMIZE\",\n  \"OPTION\",\n  \"OPTIONALLY\",\n  \"OUTFILE\",\n  \"PACK_KEYS\",\n  \"PAGE\",\n  \"PARTIAL\",\n  \"PARTITION\",\n  \"PARTITIONS\",\n  \"PASSWORD\",\n  \"PRIMARY\",\n  \"PRIVILEGES\",\n  \"PROCEDURE\",\n  \"PROCESS\",\n  \"PROCESSLIST\",\n  \"PURGE\",\n  \"QUICK\",\n  \"RAID0\",\n  \"RAID_CHUNKS\",\n  \"RAID_CHUNKSIZE\",\n  \"RAID_TYPE\",\n  \"RANGE\",\n  \"READ\",\n  \"READ_ONLY\",\n  \"READ_WRITE\",\n  \"REFERENCES\",\n  \"REGEXP\",\n  \"RELOAD\",\n  \"RENAME\",\n  \"REPAIR\",\n  \"REPEATABLE\",\n  \"REPLACE\",\n  \"REPLICATION\",\n  \"RESET\",\n  \"RESTORE\",\n  \"RESTRICT\",\n  \"RETURN\",\n  \"RETURNS\",\n  \"REVOKE\",\n  \"RLIKE\",\n  \"ROLLBACK\",\n  \"ROW\",\n  \"ROWS\",\n  \"ROW_FORMAT\",\n  \"SECOND\",\n  \"SECURITY\",\n  \"SEPARATOR\",\n  \"SERIALIZABLE\",\n  \"SESSION\",\n  \"SHARE\",\n  \"SHOW\",\n  \"SHUTDOWN\",\n  \"SLAVE\",\n  \"SONAME\",\n  \"SOUNDS\",\n  \"SQL\",\n  \"SQL_AUTO_IS_NULL\",\n  \"SQL_BIG_RESULT\",\n  \"SQL_BIG_SELECTS\",\n  \"SQL_BIG_TABLES\",\n  \"SQL_BUFFER_RESULT\",\n  \"SQL_CACHE\",\n  \"SQL_CALC_FOUND_ROWS\",\n  \"SQL_LOG_BIN\",\n  \"SQL_LOG_OFF\",\n  \"SQL_LOG_UPDATE\",\n  \"SQL_LOW_PRIORITY_UPDATES\",\n  \"SQL_MAX_JOIN_SIZE\",\n  \"SQL_NO_CACHE\",\n  \"SQL_QUOTE_SHOW_CREATE\",\n  \"SQL_SAFE_UPDATES\",\n  \"SQL_SELECT_LIMIT\",\n  \"SQL_SLAVE_SKIP_COUNTER\",\n  \"SQL_SMALL_RESULT\",\n  \"SQL_WARNINGS\",\n  \"START\",\n  \"STARTING\",\n  \"STATUS\",\n  \"STOP\",\n  \"STORAGE\",\n  \"STRAIGHT_JOIN\",\n  \"STRING\",\n  \"STRIPED\",\n  \"SUPER\",\n  \"TABLE\",\n  \"TABLES\",\n  \"TEMPORARY\",\n  \"TERMINATED\",\n  \"THEN\",\n  \"TO\",\n  \"TRAILING\",\n  \"TRANSACTIONAL\",\n  \"TRUE\",\n  \"TRUNCATE\",\n  \"TYPE\",\n  \"TYPES\",\n  \"UNCOMMITTED\",\n  \"UNIQUE\",\n  \"UNLOCK\",\n  \"UNSIGNED\",\n  \"USAGE\",\n  \"USE\",\n  \"USING\",\n  \"VARIABLES\",\n  \"VIEW\",\n  \"WHEN\",\n  \"WITH\",\n  \"WORK\",\n  \"WRITE\",\n  \"YEAR_MONTH\"\n];\n\n//回车换行\nvar reservedToplevelWords = [\n  \"ADD\",\n  \"AFTER\",\n  \"ALTER COLUMN\",\n  \"ALTER TABLE\",\n  \"DELETE FROM\",\n  \"EXCEPT\",\n  \"FETCH FIRST\",\n  \"FROM\",\n  \"GROUP BY\",\n  \"GO\",\n  \"HAVING\",\n  \"INTERSECT\",\n  \"LIMIT\",\n  \"MODIFY\",\n  \"ORDER BY\",\n  \"SELECT\",\n  \"SET CURRENT SCHEMA\",\n  \"SET SCHEMA\",\n  \"SET\",\n  \"UNION ALL\",\n  \"UNION\",\n  \"UPDATE\",\n  \"VALUES\",\n  \"WHERE\"\n];\n\n//前后换行\nvar reservedNewlineWords = [\n  \"AND\",\n  \"CROSS APPLY\",\n  \"CROSS JOIN\",\n  \"ELSE\",\n  \"INNER JOIN\",\n  \"JOIN\",\n  \"LEFT JOIN\",\n  \"LEFT OUTER JOIN\",\n  \"OR\",\n  \"OUTER APPLY\",\n  \"OUTER JOIN\",\n  \"RIGHT JOIN\",\n  \"RIGHT OUTER JOIN\",\n  \"WHEN\",\n  \"XOR\"\n];\n\nvar tokenizer = void 0;\n\nvar StandardSqlFormatter = (function() {\n  /**\n   * @param {Object} cfg Different set of configurations\n   */\n  function StandardSqlFormatter(cfg) {\n    _classCallCheck(this, StandardSqlFormatter);\n\n    this.cfg = cfg;\n  }\n\n  /**\n   * Format the whitespace in a Standard SQL string to make it easier to read\n   *\n   * @param {String} query The Standard SQL string\n   * @return {String} formatted string\n   */\n\n  StandardSqlFormatter.prototype.format = function format(query) {\n    if (!tokenizer) {\n      tokenizer = new _Tokenizer2[\"default\"]({\n        reservedWords: reservedWords,\n        reservedToplevelWords: reservedToplevelWords,\n        reservedNewlineWords: reservedNewlineWords,\n        stringTypes: ['\"\"', \"N''\", \"''\", \"``\", \"[]\"],\n        openParens: [\"(\", \"CASE\"],\n        closeParens: [\")\", \"END\"],\n        indexedPlaceholderTypes: [\"?\"],\n        namedPlaceholderTypes: [\"@\", \":\"],\n        lineCommentTypes: [\"#\", \"--\"]\n      });\n    }\n    return new _Formatter2[\"default\"](this.cfg, tokenizer).format(query);\n  };\n\n  return StandardSqlFormatter;\n})();\nexports[\"default\"] = {\n  /**\n   * Format whitespaces in a query to make it easier to read.\n   *\n   * @param {String} query\n   * @param {Object} cfg\n   *  @param {String} cfg.language Query language, default is Standard SQL\n   *  @param {String} cfg.indent Characters used for indentation, default is \"  \" (2 spaces)\n   *  @param {Object} cfg.params Collection of params for placeholder replacement\n   * @return {String}\n   */\n  format: function format(query, cfg) {\n    cfg = cfg || {};\n    return new StandardSqlFormatter(cfg).format(query);\n  }\n};\nmodule.exports = exports[\"default\"];\n","var baseRepeat = require('./_baseRepeat'),\n    isIterateeCall = require('./_isIterateeCall'),\n    toInteger = require('./toInteger'),\n    toString = require('./toString');\n\n/**\n * Repeats the given string `n` times.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to repeat.\n * @param {number} [n=1] The number of times to repeat the string.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {string} Returns the repeated string.\n * @example\n *\n * _.repeat('*', 3);\n * // => '***'\n *\n * _.repeat('abc', 2);\n * // => 'abcabc'\n *\n * _.repeat('abc', 0);\n * // => ''\n */\nfunction repeat(string, n, guard) {\n  if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {\n    n = 1;\n  } else {\n    n = toInteger(n);\n  }\n  return baseRepeat(toString(string), n);\n}\n\nmodule.exports = repeat;\n","var toString = require('./toString');\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g,\n    reHasRegExpChar = RegExp(reRegExpChar.source);\n\n/**\n * Escapes the `RegExp` special characters \"^\", \"$\", \"\\\", \".\", \"*\", \"+\",\n * \"?\", \"(\", \")\", \"[\", \"]\", \"{\", \"}\", and \"|\" in `string`.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to escape.\n * @returns {string} Returns the escaped string.\n * @example\n *\n * _.escapeRegExp('[lodash](https://lodash.com/)');\n * // => '\\[lodash\\]\\(https://lodash\\.com/\\)'\n */\nfunction escapeRegExp(string) {\n  string = toString(string);\n  return (string && reHasRegExpChar.test(string))\n    ? string.replace(reRegExpChar, '\\\\$&')\n    : string;\n}\n\nmodule.exports = escapeRegExp;\n","var wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar MATCH = wellKnownSymbol('match');\n\nmodule.exports = function (METHOD_NAME) {\n  var regexp = /./;\n  try {\n    '/./'[METHOD_NAME](regexp);\n  } catch (e) {\n    try {\n      regexp[MATCH] = false;\n      return '/./'[METHOD_NAME](regexp);\n    } catch (f) { /* empty */ }\n  } return false;\n};\n","\"use strict\";\n\nexports.__esModule = true;\n\nvar _isEmpty = require(\"lodash/isEmpty\");\n\nvar _isEmpty2 = _interopRequireDefault(_isEmpty);\n\nvar _escapeRegExp = require(\"lodash/escapeRegExp\");\n\nvar _escapeRegExp2 = _interopRequireDefault(_escapeRegExp);\n\nvar _tokenTypes = require(\"./tokenTypes\");\n\nvar _tokenTypes2 = _interopRequireDefault(_tokenTypes);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Tokenizer = function () {\n    /**\n     * @param {Object} cfg\n     *  @param {String[]} cfg.reservedWords Reserved words in SQL\n     *  @param {String[]} cfg.reservedToplevelWords Words that are set to new line separately\n     *  @param {String[]} cfg.reservedNewlineWords Words that are set to newline\n     *  @param {String[]} cfg.stringTypes String types to enable: \"\", '', ``, [], N''\n     *  @param {String[]} cfg.openParens Opening parentheses to enable, like (, [\n     *  @param {String[]} cfg.closeParens Closing parentheses to enable, like ), ]\n     *  @param {String[]} cfg.indexedPlaceholderTypes Prefixes for indexed placeholders, like ?\n     *  @param {String[]} cfg.namedPlaceholderTypes Prefixes for named placeholders, like @ and :\n     *  @param {String[]} cfg.lineCommentTypes Line comments to enable, like # and --\n     *  @param {String[]} cfg.specialWordChars Special chars that can be found inside of words, like @ and #\n     */\n    function Tokenizer(cfg) {\n        _classCallCheck(this, Tokenizer);\n\n        this.WHITESPACE_REGEX = /^(\\s+)/;\n        this.NUMBER_REGEX = /^((-\\s*)?[0-9]+(\\.[0-9]+)?|0x[0-9a-fA-F]+|0b[01]+)\\b/;\n        this.OPERATOR_REGEX = /^(!=|<>|==|<=|>=|!<|!>|\\|\\||::|->>|->|~~\\*|~~|!~~\\*|!~~|~\\*|!~\\*|!~|.)/;\n\n        this.BLOCK_COMMENT_REGEX = /^(\\/\\*[^]*?(?:\\*\\/|$))/;\n        this.LINE_COMMENT_REGEX = this.createLineCommentRegex(cfg.lineCommentTypes);\n\n        this.RESERVED_TOPLEVEL_REGEX = this.createReservedWordRegex(cfg.reservedToplevelWords);\n        this.RESERVED_NEWLINE_REGEX = this.createReservedWordRegex(cfg.reservedNewlineWords);\n        this.RESERVED_PLAIN_REGEX = this.createReservedWordRegex(cfg.reservedWords);\n\n        this.WORD_REGEX = this.createWordRegex(cfg.specialWordChars);\n        this.STRING_REGEX = this.createStringRegex(cfg.stringTypes);\n\n        this.OPEN_PAREN_REGEX = this.createParenRegex(cfg.openParens);\n        this.CLOSE_PAREN_REGEX = this.createParenRegex(cfg.closeParens);\n\n        this.INDEXED_PLACEHOLDER_REGEX = this.createPlaceholderRegex(cfg.indexedPlaceholderTypes, \"[0-9]*\");\n        this.IDENT_NAMED_PLACEHOLDER_REGEX = this.createPlaceholderRegex(cfg.namedPlaceholderTypes, \"[a-zA-Z0-9._$]+\");\n        this.STRING_NAMED_PLACEHOLDER_REGEX = this.createPlaceholderRegex(cfg.namedPlaceholderTypes, this.createStringPattern(cfg.stringTypes));\n    }\n\n    Tokenizer.prototype.createLineCommentRegex = function createLineCommentRegex(lineCommentTypes) {\n        return new RegExp(\"^((?:\" + lineCommentTypes.map(function (c) {\n            return (0, _escapeRegExp2[\"default\"])(c);\n        }).join(\"|\") + \").*?(?:\\n|$))\");\n    };\n\n    Tokenizer.prototype.createReservedWordRegex = function createReservedWordRegex(reservedWords) {\n        var reservedWordsPattern = reservedWords.join(\"|\").replace(/ /g, \"\\\\s+\");\n        return new RegExp(\"^(\" + reservedWordsPattern + \")\\\\b\", \"i\");\n    };\n\n    Tokenizer.prototype.createWordRegex = function createWordRegex() {\n        var specialChars = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n        return new RegExp(\"^([\\\\w\" + specialChars.join(\"\") + \"]+)\");\n    };\n\n    Tokenizer.prototype.createStringRegex = function createStringRegex(stringTypes) {\n        return new RegExp(\"^(\" + this.createStringPattern(stringTypes) + \")\");\n    };\n\n    // This enables the following string patterns:\n    // 1. backtick quoted string using `` to escape\n    // 2. square bracket quoted string (SQL Server) using ]] to escape\n    // 3. double quoted string using \"\" or \\\" to escape\n    // 4. single quoted string using '' or \\' to escape\n    // 5. national character quoted string using N'' or N\\' to escape\n\n\n    Tokenizer.prototype.createStringPattern = function createStringPattern(stringTypes) {\n        var patterns = {\n            \"``\": \"((`[^`]*($|`))+)\",\n            \"[]\": \"((\\\\[[^\\\\]]*($|\\\\]))(\\\\][^\\\\]]*($|\\\\]))*)\",\n            \"\\\"\\\"\": \"((\\\"[^\\\"\\\\\\\\]*(?:\\\\\\\\.[^\\\"\\\\\\\\]*)*(\\\"|$))+)\",\n            \"''\": \"(('[^'\\\\\\\\]*(?:\\\\\\\\.[^'\\\\\\\\]*)*('|$))+)\",\n            \"N''\": \"((N'[^N'\\\\\\\\]*(?:\\\\\\\\.[^N'\\\\\\\\]*)*('|$))+)\"\n        };\n\n        return stringTypes.map(function (t) {\n            return patterns[t];\n        }).join(\"|\");\n    };\n\n    Tokenizer.prototype.createParenRegex = function createParenRegex(parens) {\n        var _this = this;\n\n        return new RegExp(\"^(\" + parens.map(function (p) {\n            return _this.escapeParen(p);\n        }).join(\"|\") + \")\", \"i\");\n    };\n\n    Tokenizer.prototype.escapeParen = function escapeParen(paren) {\n        if (paren.length === 1) {\n            // A single punctuation character\n            return (0, _escapeRegExp2[\"default\"])(paren);\n        } else {\n            // longer word\n            return \"\\\\b\" + paren + \"\\\\b\";\n        }\n    };\n\n    Tokenizer.prototype.createPlaceholderRegex = function createPlaceholderRegex(types, pattern) {\n        if ((0, _isEmpty2[\"default\"])(types)) {\n            return false;\n        }\n        var typesRegex = types.map(_escapeRegExp2[\"default\"]).join(\"|\");\n\n        return new RegExp(\"^((?:\" + typesRegex + \")(?:\" + pattern + \"))\");\n    };\n\n    /**\n     * Takes a SQL string and breaks it into tokens.\n     * Each token is an object with type and value.\n     *\n     * @param {String} input The SQL string\n     * @return {Object[]} tokens An array of tokens.\n     *  @return {String} token.type\n     *  @return {String} token.value\n     */\n\n\n    Tokenizer.prototype.tokenize = function tokenize(input) {\n        var tokens = [];\n        var token = void 0;\n\n        // Keep processing the string until it is empty\n        while (input.length) {\n            // Get the next token and the token type\n            token = this.getNextToken(input, token);\n            // Advance the string\n            input = input.substring(token.value.length);\n\n            tokens.push(token);\n        }\n        return tokens;\n    };\n\n    Tokenizer.prototype.getNextToken = function getNextToken(input, previousToken) {\n        return this.getWhitespaceToken(input) || this.getCommentToken(input) || this.getStringToken(input) || this.getOpenParenToken(input) || this.getCloseParenToken(input) || this.getPlaceholderToken(input) || this.getNumberToken(input) || this.getReservedWordToken(input, previousToken) || this.getWordToken(input) || this.getOperatorToken(input);\n    };\n\n    Tokenizer.prototype.getWhitespaceToken = function getWhitespaceToken(input) {\n        return this.getTokenOnFirstMatch({\n            input: input,\n            type: _tokenTypes2[\"default\"].WHITESPACE,\n            regex: this.WHITESPACE_REGEX\n        });\n    };\n\n    Tokenizer.prototype.getCommentToken = function getCommentToken(input) {\n        return this.getLineCommentToken(input) || this.getBlockCommentToken(input);\n    };\n\n    Tokenizer.prototype.getLineCommentToken = function getLineCommentToken(input) {\n        return this.getTokenOnFirstMatch({\n            input: input,\n            type: _tokenTypes2[\"default\"].LINE_COMMENT,\n            regex: this.LINE_COMMENT_REGEX\n        });\n    };\n\n    Tokenizer.prototype.getBlockCommentToken = function getBlockCommentToken(input) {\n        return this.getTokenOnFirstMatch({\n            input: input,\n            type: _tokenTypes2[\"default\"].BLOCK_COMMENT,\n            regex: this.BLOCK_COMMENT_REGEX\n        });\n    };\n\n    Tokenizer.prototype.getStringToken = function getStringToken(input) {\n        return this.getTokenOnFirstMatch({\n            input: input,\n            type: _tokenTypes2[\"default\"].STRING,\n            regex: this.STRING_REGEX\n        });\n    };\n\n    Tokenizer.prototype.getOpenParenToken = function getOpenParenToken(input) {\n        return this.getTokenOnFirstMatch({\n            input: input,\n            type: _tokenTypes2[\"default\"].OPEN_PAREN,\n            regex: this.OPEN_PAREN_REGEX\n        });\n    };\n\n    Tokenizer.prototype.getCloseParenToken = function getCloseParenToken(input) {\n        return this.getTokenOnFirstMatch({\n            input: input,\n            type: _tokenTypes2[\"default\"].CLOSE_PAREN,\n            regex: this.CLOSE_PAREN_REGEX\n        });\n    };\n\n    Tokenizer.prototype.getPlaceholderToken = function getPlaceholderToken(input) {\n        return this.getIdentNamedPlaceholderToken(input) || this.getStringNamedPlaceholderToken(input) || this.getIndexedPlaceholderToken(input);\n    };\n\n    Tokenizer.prototype.getIdentNamedPlaceholderToken = function getIdentNamedPlaceholderToken(input) {\n        return this.getPlaceholderTokenWithKey({\n            input: input,\n            regex: this.IDENT_NAMED_PLACEHOLDER_REGEX,\n            parseKey: function parseKey(v) {\n                return v.slice(1);\n            }\n        });\n    };\n\n    Tokenizer.prototype.getStringNamedPlaceholderToken = function getStringNamedPlaceholderToken(input) {\n        var _this2 = this;\n\n        return this.getPlaceholderTokenWithKey({\n            input: input,\n            regex: this.STRING_NAMED_PLACEHOLDER_REGEX,\n            parseKey: function parseKey(v) {\n                return _this2.getEscapedPlaceholderKey({ key: v.slice(2, -1), quoteChar: v.slice(-1) });\n            }\n        });\n    };\n\n    Tokenizer.prototype.getIndexedPlaceholderToken = function getIndexedPlaceholderToken(input) {\n        return this.getPlaceholderTokenWithKey({\n            input: input,\n            regex: this.INDEXED_PLACEHOLDER_REGEX,\n            parseKey: function parseKey(v) {\n                return v.slice(1);\n            }\n        });\n    };\n\n    Tokenizer.prototype.getPlaceholderTokenWithKey = function getPlaceholderTokenWithKey(_ref) {\n        var input = _ref.input,\n            regex = _ref.regex,\n            parseKey = _ref.parseKey;\n\n        var token = this.getTokenOnFirstMatch({ input: input, regex: regex, type: _tokenTypes2[\"default\"].PLACEHOLDER });\n        if (token) {\n            token.key = parseKey(token.value);\n        }\n        return token;\n    };\n\n    Tokenizer.prototype.getEscapedPlaceholderKey = function getEscapedPlaceholderKey(_ref2) {\n        var key = _ref2.key,\n            quoteChar = _ref2.quoteChar;\n\n        return key.replace(new RegExp((0, _escapeRegExp2[\"default\"])(\"\\\\\") + quoteChar, \"g\"), quoteChar);\n    };\n\n    // Decimal, binary, or hex numbers\n\n\n    Tokenizer.prototype.getNumberToken = function getNumberToken(input) {\n        return this.getTokenOnFirstMatch({\n            input: input,\n            type: _tokenTypes2[\"default\"].NUMBER,\n            regex: this.NUMBER_REGEX\n        });\n    };\n\n    // Punctuation and symbols\n\n\n    Tokenizer.prototype.getOperatorToken = function getOperatorToken(input) {\n        return this.getTokenOnFirstMatch({\n            input: input,\n            type: _tokenTypes2[\"default\"].OPERATOR,\n            regex: this.OPERATOR_REGEX\n        });\n    };\n\n    Tokenizer.prototype.getReservedWordToken = function getReservedWordToken(input, previousToken) {\n        // A reserved word cannot be preceded by a \".\"\n        // this makes it so in \"mytable.from\", \"from\" is not considered a reserved word\n        if (previousToken && previousToken.value && previousToken.value === \".\") {\n            return;\n        }\n        return this.getToplevelReservedToken(input) || this.getNewlineReservedToken(input) || this.getPlainReservedToken(input);\n    };\n\n    Tokenizer.prototype.getToplevelReservedToken = function getToplevelReservedToken(input) {\n        return this.getTokenOnFirstMatch({\n            input: input,\n            type: _tokenTypes2[\"default\"].RESERVED_TOPLEVEL,\n            regex: this.RESERVED_TOPLEVEL_REGEX\n        });\n    };\n\n    Tokenizer.prototype.getNewlineReservedToken = function getNewlineReservedToken(input) {\n        return this.getTokenOnFirstMatch({\n            input: input,\n            type: _tokenTypes2[\"default\"].RESERVED_NEWLINE,\n            regex: this.RESERVED_NEWLINE_REGEX\n        });\n    };\n\n    Tokenizer.prototype.getPlainReservedToken = function getPlainReservedToken(input) {\n        return this.getTokenOnFirstMatch({\n            input: input,\n            type: _tokenTypes2[\"default\"].RESERVED,\n            regex: this.RESERVED_PLAIN_REGEX\n        });\n    };\n\n    Tokenizer.prototype.getWordToken = function getWordToken(input) {\n        return this.getTokenOnFirstMatch({\n            input: input,\n            type: _tokenTypes2[\"default\"].WORD,\n            regex: this.WORD_REGEX\n        });\n    };\n\n    Tokenizer.prototype.getTokenOnFirstMatch = function getTokenOnFirstMatch(_ref3) {\n        var input = _ref3.input,\n            type = _ref3.type,\n            regex = _ref3.regex;\n\n        var matches = input.match(regex);\n\n        if (matches) {\n            return { type: type, value: matches[1] };\n        }\n    };\n\n    return Tokenizer;\n}();\n\nexports[\"default\"] = Tokenizer;\nmodule.exports = exports[\"default\"];","var fails = require('../internals/fails');\nvar whitespaces = require('../internals/whitespaces');\n\nvar non = '\\u200B\\u0085\\u180E';\n\n// check that a method works with the correct list\n// of whitespaces and has a correct name\nmodule.exports = function (METHOD_NAME) {\n  return fails(function () {\n    return !!whitespaces[METHOD_NAME]() || non[METHOD_NAME]() != non || whitespaces[METHOD_NAME].name !== METHOD_NAME;\n  });\n};\n","'use strict';\nvar $ = require('../internals/export');\nvar $includes = require('../internals/array-includes').includes;\nvar addToUnscopables = require('../internals/add-to-unscopables');\nvar arrayMethodUsesToLength = require('../internals/array-method-uses-to-length');\n\nvar USES_TO_LENGTH = arrayMethodUsesToLength('indexOf', { ACCESSORS: true, 1: 0 });\n\n// `Array.prototype.includes` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.includes\n$({ target: 'Array', proto: true, forced: !USES_TO_LENGTH }, {\n  includes: function includes(el /* , fromIndex = 0 */) {\n    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\n\n// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables\naddToUnscopables('includes');\n","\"use strict\";\n\nexports.__esModule = true;\n\nvar _tokenTypes = require(\"./tokenTypes\");\n\nvar _tokenTypes2 = _interopRequireDefault(_tokenTypes);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar INLINE_MAX_LENGTH = 50;\n\n/**\n * Bookkeeper for inline blocks.\n *\n * Inline blocks are parenthized expressions that are shorter than INLINE_MAX_LENGTH.\n * These blocks are formatted on a single line, unlike longer parenthized\n * expressions where open-parenthesis causes newline and increase of indentation.\n */\n\nvar InlineBlock = function () {\n    function InlineBlock() {\n        _classCallCheck(this, InlineBlock);\n\n        this.level = 0;\n    }\n\n    /**\n     * Begins inline block when lookahead through upcoming tokens determines\n     * that the block would be smaller than INLINE_MAX_LENGTH.\n     * @param  {Object[]} tokens Array of all tokens\n     * @param  {Number} index Current token position\n     */\n\n\n    InlineBlock.prototype.beginIfPossible = function beginIfPossible(tokens, index) {\n        if (this.level === 0 && this.isInlineBlock(tokens, index)) {\n            this.level = 1;\n        } else if (this.level > 0) {\n            this.level++;\n        } else {\n            this.level = 0;\n        }\n    };\n\n    /**\n     * Finishes current inline block.\n     * There might be several nested ones.\n     */\n\n\n    InlineBlock.prototype.end = function end() {\n        this.level--;\n    };\n\n    /**\n     * True when inside an inline block\n     * @return {Boolean}\n     */\n\n\n    InlineBlock.prototype.isActive = function isActive() {\n        return this.level > 0;\n    };\n\n    // Check if this should be an inline parentheses block\n    // Examples are \"NOW()\", \"COUNT(*)\", \"int(10)\", key(`somecolumn`), DECIMAL(7,2)\n\n\n    InlineBlock.prototype.isInlineBlock = function isInlineBlock(tokens, index) {\n        var length = 0;\n        var level = 0;\n\n        for (var i = index; i < tokens.length; i++) {\n            var token = tokens[i];\n            length += token.value.length;\n\n            // Overran max length\n            if (length > INLINE_MAX_LENGTH) {\n                return false;\n            }\n\n            if (token.type === _tokenTypes2[\"default\"].OPEN_PAREN) {\n                level++;\n            } else if (token.type === _tokenTypes2[\"default\"].CLOSE_PAREN) {\n                level--;\n                if (level === 0) {\n                    return true;\n                }\n            }\n\n            if (this.isForbiddenToken(token)) {\n                return false;\n            }\n        }\n        return false;\n    };\n\n    // Reserved words that cause newlines, comments and semicolons\n    // are not allowed inside inline parentheses block\n\n\n    InlineBlock.prototype.isForbiddenToken = function isForbiddenToken(_ref) {\n        var type = _ref.type,\n            value = _ref.value;\n\n        return type === _tokenTypes2[\"default\"].RESERVED_TOPLEVEL || type === _tokenTypes2[\"default\"].RESERVED_NEWLINE || type === _tokenTypes2[\"default\"].COMMENT || type === _tokenTypes2[\"default\"].BLOCK_COMMENT || value === \";\";\n    };\n\n    return InlineBlock;\n}();\n\nexports[\"default\"] = InlineBlock;\nmodule.exports = exports[\"default\"];","var baseToString = require('./_baseToString'),\n    castSlice = require('./_castSlice'),\n    charsEndIndex = require('./_charsEndIndex'),\n    stringToArray = require('./_stringToArray'),\n    toString = require('./toString');\n\n/** Used to match leading and trailing whitespace. */\nvar reTrimEnd = /\\s+$/;\n\n/**\n * Removes trailing whitespace or specified characters from `string`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category String\n * @param {string} [string=''] The string to trim.\n * @param {string} [chars=whitespace] The characters to trim.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {string} Returns the trimmed string.\n * @example\n *\n * _.trimEnd('  abc  ');\n * // => '  abc'\n *\n * _.trimEnd('-_-abc-_-', '_-');\n * // => '-_-abc'\n */\nfunction trimEnd(string, chars, guard) {\n  string = toString(string);\n  if (string && (guard || chars === undefined)) {\n    return string.replace(reTrimEnd, '');\n  }\n  if (!string || !(chars = baseToString(chars))) {\n    return string;\n  }\n  var strSymbols = stringToArray(string),\n      end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;\n\n  return castSlice(strSymbols, 0, end).join('');\n}\n\nmodule.exports = trimEnd;\n"],"sourceRoot":""}